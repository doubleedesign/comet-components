<?php
/**
 * This script generates JSON-format Storybook story files for use with @storybook/server-webpack5.
 * They use component JSON definitions generated by generate-json-defs.php.
 * Usage: php generate-stories.php to generate or regenerate all
 *      php generate-stories.php --component MyComponent to generate or regenerate stories for a specific component
 */

class ComponentStoryGenerator {
	private string $directory;
	private string $outputDirectory;

	public function __construct() {
		$this->directory = dirname(__DIR__, 1) . '\src\components';
		$this->outputDirectory = dirname(__DIR__, 1) . '\test\browser\stories';
	}

	public function runAll(): void {
		// Get all JSON files in the directory
		/** @noinspection PhpUnhandledExceptionInspection */
		$files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->directory));

		foreach ($files as $file) {
			if ($file->isFile() && $file->getExtension() === 'json') {
				$this->processFile($file->getPathname());
			}
		}
	}

	/** @noinspection PhpUnhandledExceptionInspection */
	public function runSingle($component): void {
		$filePath = $this->directory . '\\' . $component . '\\' . $component . '.json';
		if (!file_exists($filePath)) {
			throw new RuntimeException("Component class $component not found");
		}

		$this->processFile($filePath);
	}

	private function processFile(string $filePath): void {
		// Read JSON from the file
		$content = file_get_contents($filePath);
		$json = json_decode($content, true);
		$shortName = self::kebab_case($json['name']);
		// Exclude some attributes, such as inline styles, from stories
		$attributes = array_diff_key($json['attributes'], array_flip(['style']));

		$storyFile = [
			'title' => sprintf('Components/%s', $json['name']),
			'parameters' => [
				'docs' => [
					"description" => [
						"component" => '', // TODO: How to set this?
					]
				],
				'server' => [
					"id" => $shortName,
					'url' => sprintf('http://localhost:6001/%s.php', strtolower($shortName)),
					'params' => [
						"__debug" => true
					]
				]
			]
		];

		$storyFile['args'] = array_reduce(array_keys($attributes), function($acc, $attr) use ($attributes) {
			if($attr === 'id') return $acc; // Skip some attributes

			if($attr === 'classes') {
				$acc[$attr] = ['is-style-default'];
			} else {
				$acc[$attr] = $attributes[$attr]['default'] ?? '';
			}
			return $acc;
		}, []);

		$storyFile['argTypes'] = array_reduce(array_keys($attributes), function($acc, $attr) use ($attributes) {
			if($attr === 'id') return $acc; // Skip some attributes

			$data = $attributes[$attr];
			$propType = isset($data['supported']) ? 'array' : $data['type'];

			$acc[$attr] = [
				'description' => $data['description'] ?? '',
				'control' => [
					'type' => self::propertyTypeToControl($propType)
				],
				'table' => [
					'defaultValue' => [
						'summary' => $data['default'] ?? ''
					],
					'type' => [
						'summary' => $data['type']
					]
				]
			];

			if($propType === 'array') {
				$acc[$attr]['options'] = $data['supported'];
			}

			return $acc;
		}, []);

		$storyFile['stories'] = [];

		// Export the processed data as a JSON file
		$outputPath = $this->outputDirectory . '\\' . strtolower($shortName) . '.stories.json';
		$this->exportToJson($outputPath, $storyFile);
	}

	/**
	 * Exports the processed data as a JSON file to the specified output path.
	 * @param string $outputPath Where to save the file.
	 * @param array $data The array of data to be encoded into JSON and exported.
	 *
	 * @return void
	 */
	public function exportToJson(string $outputPath, array $data): void {
		$json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
		file_put_contents($outputPath, $json);
	}

	private static function propertyTypeToControl($propType): string {
		switch ($propType) {
			case 'number':
				return 'number';
			case 'boolean':
				return 'boolean';
			case 'array':
				return 'checkbox';
			case 'Alignment':
			case 'AspectRatio':
			case 'Tag':
				return 'select';
			default:
				return 'text';
		}
	}

	private static function kebab_case(string $value): string {
		// If no whitespace characters, return as is (preserves snake_case and PascalCase)
		if (!preg_match('/\s/', $value)) {
			return $value;
		}

		// Convert whitespace to hyphens and make lowercase
		return trim(strtolower(preg_replace('/\s+/', '-', $value)));
	}
}


// Usage: php generate-stories.php
//     or php generate-stories.php --component MyComponent
try {
	$instance = new ComponentStoryGenerator();
	if (isset($argv[1]) && $argv[1] === '--component') {
		$instance->runSingle($argv[2]);
	}
	else {
		$instance->runAll();
	}
	echo "Done!\n";
}
catch (Exception $e) {
	echo "Error: " . $e->getMessage() . "\n";
}
