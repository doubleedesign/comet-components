import htmlData from './resources/html-elements.json' assert { type: 'json' };
import { writeFileSync } from 'fs';
import { execSync } from 'child_process';

type ElementData = {
	deprecated: boolean;
	experimental: boolean;
	attributes: any[];
}

run();

function run() {
	// Get the global attribute names
	const globalAttributes = filterDeprecatedAndExperimental(htmlData['*'].attributes);

	// Process tags to get the supported ones and their attributes
	const excludedTags = ['*', 'html', 'body', 'script', 'link', 'slot', 'area', 'b', 'base', 'menu', 'rb', 'rp', 'rt', 'rtc', 'ruby', 'template'];
	const elements = Object.entries(htmlData)
		.filter(([key, data]: [string, ElementData]) => {
			return !excludedTags.includes(key) && (!data.deprecated && !data.experimental);
		})
		.reduce((acc, [tag, data]: [string, ElementData]) => {
			acc[tag] = filterDeprecatedAndExperimental(data.attributes);
			return acc;
	}, {});

	const output = buildOutput(elements, globalAttributes);

	writeFileSync('./base/types/Tag.php', output, 'utf8');
	// Format the generated file
	execSync('npx prettier --parser php --write "./base/types/Tag.php"');
}

function buildOutput(elements: Record<string, string[]>, globalAttributes: string[]): string {
	const elementNames = Object.keys(elements);
	const cases = `${elementNames.map(tag => { 
		return `case ${tag.toUpperCase()} = '${tag.toLowerCase()}';`}).join('\n')
	}`;
	const attributeMap = Object.entries(elements)
		.map(([tag, attributes]: [string, string[]]) => {
			return [tag, attributes.filter(attr => !globalAttributes.includes(attr))];
		})
		.filter(([_, attributes]: [string, string[]]) => {
			return attributes.length > 0;
		})
		.map(([tag, attributes]: [string, string[]]) => {
			return `self::${tag.toUpperCase()} => ${JSON.stringify(attributes)}`;
		});

	return `<?php
		// Generated by ./scripts/generate-tag-enum.ts
		namespace Starterkit\\RenderBridge;
		
		enum Tag: string {
			${cases}
			
			private const GLOBAL_ATTRIBUTES = ${JSON.stringify(globalAttributes)};
		
			public function get_valid_attributes(): array {
				$local = match ($this) {
					${attributeMap.join(',\n')},
					default => [],
				};
				
				return array_merge(self::GLOBAL_ATTRIBUTES, $local);
			}
		}
	`;
}

function filterDeprecatedAndExperimental(attributes: object): string[] {
	if(Object.keys(attributes).length === 0) return [];

	return (Object.entries(attributes) as [string, any][])
		.filter(([_, properties]) => !properties.deprecated && !properties.experimental)
		.map(([name, _]) => name);
}
