@use 'variables' as *;
@use 'mixins' as *;

/**
 * Global CSS that gets used in standalone packages as well as entirely Comet-based projects.
 * Use common.scss for styles that should not be packaged with standalone components.
 */


[data-valign],
[data-halign] {
	display: flex;
	flex-wrap: wrap;
}

// Default alignments. Note that components can override with their own stuff that they do with these values,
// for example orientation for Tabs is about where the tablist is.
[data-valign="start"] {
	align-items: flex-start;
}

[data-valign="center"] {
	align-items: center;
}

[data-valign="end"] {
	align-items: flex-end;
}

[data-halign="start"] {
	justify-content: flex-start;
}

[data-halign="center"] {
	justify-content: center;
}

[data-halign="end"] {
	justify-content: flex-end;
}

[data-halign="justify"] {
	justify-content: space-between;
}

[data-orientation="horizontal"] {
	display: flex;
	flex-direction: row;
}

[data-orientation="vertical"] {
	display: flex;
	flex-direction: column;
}

@each $name, $color in $colors {
	[data-color-theme="#{$name}"] {
		// Set a high-level local variable that can be accessed by Vue components, to simplify using vanilla CSS in SFCs
		--theme-color: var(--color-#{$name});
		--theme-text-color: var(--readable-color-#{$name});
	}
}

// Basic theme styling for elements with a text colour attribute specified
@each $name, $color in $colors {
	[data-text-color="#{$name}"] {
		color: var(--color-#{$name});
	}
}

// Basic theme styling for elements with a background colour attribute specified
@each $name, $color in $colors {
	body[data-global-background="#{$name}"] {
		background-color: var(--color-#{$name});
		color: var(--readable-color-#{$name});
	}

	[data-background="#{$name}"] {
		// Apply background colour and default padding if it is different to the global background
		&:not(body[data-global-background="#{$name}"] &) {
			background-color: var(--color-#{$name});
			color: var(--readable-color-#{$name});

			&.layout-block:not(.page-section) {
				@include nested-padding();
			}
		}

		// Or if it has an ancestor with a different background to itself and to the global background
		@at-root {
			[data-background]:not([data-background="#{$name}"]) & {
				background-color: var(--color-#{$name});
				color: var(--readable-color-#{$name});

				// Reset child elements that match global background
				body[data-global-background="#{$name}"] & [data-background="#{$name}"] {
					background-color: transparent;
					color: inherit;
				}
			}
		}
	}

	// 50/50 gradient backgrounds
	@each $name2, $color2 in $colors {
		[data-background="gradient-#{$name}-#{$name2}"] {
			background: linear-gradient(180deg, var(--color-#{$name}) 0%, var(--color-#{$name}) 50%, var(--color-#{$name2}) 50%, var(--color-#{$name2}) 100%);
		}
	}
}
