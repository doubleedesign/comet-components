import{_ as c,c as h,b as t,a as p,e as o,d as n,w as s,r as d,o as m}from"./app-B-D30-e-.js";const v={},b={class:"table-of-contents"};function g(w,e){const i=d("RouteLink"),r=d("router-link"),u=d("Tabs");return m(),h("div",null,[e[18]||(e[18]=t("h1",{id:"browser-testing",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#browser-testing"},[t("span",null,"Browser testing")])],-1)),t("p",null,[e[2]||(e[2]=n("In order to view the component test out put and pages found in each component's ")),e[3]||(e[3]=t("code",null,"__tests__",-1)),e[4]||(e[4]=n(" directory for development and manual testing purposes, view them in ")),o(i,{to:"/development-core/testing/storybook.html"},{default:s(()=>e[0]||(e[0]=[n("Storybook")])),_:1}),e[5]||(e[5]=n(", and run the ")),o(i,{to:"/development-core/testing/integration-tests.html"},{default:s(()=>e[1]||(e[1]=[n("integration tests")])),_:1}),e[6]||(e[6]=n(", you need to run a local web server that can access the test component output files."))]),t("nav",b,[t("ul",null,[t("li",null,[o(r,{to:"#prerequisites"},{default:s(()=>e[7]||(e[7]=[n("Prerequisites")])),_:1})]),t("li",null,[o(r,{to:"#option-1-basic-php-web-server"},{default:s(()=>e[8]||(e[8]=[n("Option 1: Basic PHP web server")])),_:1})]),t("li",null,[o(r,{to:"#option-2-laravel-herd"},{default:s(()=>e[9]||(e[9]=[n("Option 2: Laravel Herd")])),_:1})]),t("li",null,[o(r,{to:"#option-3-phpstorm-s-built-in-web-server"},{default:s(()=>e[10]||(e[10]=[n("Option 3: PhpStorm's built-in web server")])),_:1})])])]),e[19]||(e[19]=p('<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The below instructions are Windows-specific. If you&#39;re using MacOS or Linux you will need to adapt some parts, such as symlinking procedures and file paths.</p></div><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h2><ul><li>PHP installed locally</li><li>Symlinks created for the <code>./test/browser/</code> directory. This is done automatically when you run <code>npm run refresh:all</code>, but if you skipped that step, you can create them manually by running the following command in the project root directory:</li></ul>',3)),o(u,{id:"29",data:[{id:"WSL (Bash)"},{id:"PowerShell"}],"tab-id":"shell"},{title0:s(({value:a,isActive:l})=>e[11]||(e[11]=[n("WSL (Bash)")])),title1:s(({value:a,isActive:l})=>e[12]||(e[12]=[n("PowerShell")])),tab0:s(({value:a,isActive:l})=>e[13]||(e[13]=[t("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[t("pre",null,[t("code",null,[t("span",{class:"line"},"powershell.exe ./scripts/symlinks.ps1"),n(`
`),t("span",{class:"line"})])])],-1)])),tab1:s(({value:a,isActive:l})=>e[14]||(e[14]=[t("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[t("pre",null,[t("code",null,[t("span",{class:"line"},[t("span",{class:"token punctuation"},"."),t("span",{class:"token operator"},"/"),n("scripts/symlinks"),t("span",{class:"token punctuation"},"."),n("ps1")]),n(`
`),t("span",{class:"line"})])])],-1)])),_:1}),e[20]||(e[20]=p(`<h2 id="option-1-basic-php-web-server" tabindex="-1"><a class="header-anchor" href="#option-1-basic-php-web-server"><span>Option 1: Basic PHP web server</span></a></h2><p>Run the following command in the project root directory to start a basic PHP web server:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> run test:server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will start a PHP web server on port 6001 that runs from the <code>./test/browser/</code> directory. You can access the server at <code>http://localhost:6001</code>.</p><p>An example of a testing page URL for this setup is:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">http://localhost:6001/pages/container-colours.php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="option-2-laravel-herd" tabindex="-1"><a class="header-anchor" href="#option-2-laravel-herd"><span>Option 2: Laravel Herd</span></a></h2><p><a href="https://herd.laravel.com" target="_blank" rel="noopener noreferrer">Laravel Herd</a> is a local development environment for PHP applications. It provides a simple way to run a local web server with advanced debugging features.</p>`,8)),t("p",null,[e[16]||(e[16]=n("More details on installing and configuring Herd can be found on the ")),o(i,{to:"/development-core/tooling/php.html"},{default:s(()=>e[15]||(e[15]=[n("PHP")])),_:1}),e[17]||(e[17]=n(" page. The below instructions assume you have Herd installed and running."))]),e[21]||(e[21]=p(`<ol><li><p>Add Comet Components as a Herd site by either:<br> a. opening the Herd app and clicking on the <strong>Add Site</strong> button. Select the project root directory so that the URL will be <code>http://comet-components.test</code>.<br> b. running <code>herd link comet-components</code> from the project root directory in PowerShell.</p></li><li><p>Open the <code>php.ini</code> file for the currently active PHP version in Herd. You can find this in <code>Herd &gt; PHP &gt; right-click on the current version &gt; Open php.ini directory</code>. Add the below lines, filling in your own username and updating the project path as needed:</p><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code><span class="line"><span class="token key attr-name">herd_auto_prepend_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">C:/Users/YOUR_USERNAME/PHPStormProjects/comet-components/test/browser/wrapper-open.php</span></span>
<span class="line"><span class="token key attr-name">herd_auto_append_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">C:/Users/YOUR_USERNAME/PHPStormProjects/comet-components/test/browser/wrapper-close.php</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Restart the PHP service in Herd so that the updated configuration is loaded.</p></li></ol><p>An example of a testing page URL for this setup is:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">http://comet-components.test/test/browser/pages/container-colours.php\`.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="option-3-phpstorm-s-built-in-web-server" tabindex="-1"><a class="header-anchor" href="#option-3-phpstorm-s-built-in-web-server"><span>Option 3: PhpStorm&#39;s built-in web server</span></a></h2><p>If you are using PhpStorm, you can also run the built-in web server. This is what you see when you click on the &quot;built in preview&quot; or browser icons that appear in the top right of the editor when you open a file, or right-click on the tab or the file in the Project tool window and navigate to <code>Open in &gt; Browser</code>.</p><p>For this to work, the <code>php.ini</code> configuration file for PhpStorm&#39;s currently selected PHP interpreter must have the <code>auto_prepend_file</code> and <code>auto_append_file</code> values set. For Laravel Herd, follow the instructions above; for other installations, it&#39;s the same just without <code>herd_</code> at the beginning.</p>`,6))])}const P=c(v,[["render",g]]),y=JSON.parse(`{"path":"/development-core/testing/browser.html","title":"Browser testing","lang":"en-AU","frontmatter":{"title":"Browser testing","position":2},"headers":[{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Option 1: Basic PHP web server","slug":"option-1-basic-php-web-server","link":"#option-1-basic-php-web-server","children":[]},{"level":2,"title":"Option 2: Laravel Herd","slug":"option-2-laravel-herd","link":"#option-2-laravel-herd","children":[]},{"level":2,"title":"Option 3: PhpStorm's built-in web server","slug":"option-3-phpstorm-s-built-in-web-server","link":"#option-3-phpstorm-s-built-in-web-server","children":[]}],"git":{},"filePathRelative":"development-core/testing/browser.md"}`);export{P as comp,y as data};
