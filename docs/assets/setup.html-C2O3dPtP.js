import{_ as d,a as c,b as p}from"./phpstorm-pest-BgRv9WN-.js";import{_ as h,c as u,b as t,a as n,d as o,e as l,w as a,r,o as g}from"./app-BzyXD7Rl.js";const m="/docs/phpstorm-php-bat.png",f="/docs/phpstorm-terminal-colours.png",w="/docs/phpstorm-terminal-powershell.png",b="/docs/phpstorm-node-windows.png",v="/docs/phpstorm-scope-example.png",y="/docs/phpstorm-scss-filewatcher-core.png",k="/docs/phpstorm-php-codestyle.png",P={},S={class:"hint-container important"},x={class:"table-of-contents"},j={class:"hint-container details"};function I(T,e){const s=r("RouteLink"),i=r("router-link");return g(),u("div",null,[e[29]||(e[29]=t("h1",{id:"local-development-setup",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#local-development-setup"},[t("span",null,"Local development setup")])],-1)),t("div",S,[e[3]||(e[3]=t("p",{class:"hint-container-title"},"Important",-1)),e[4]||(e[4]=t("p",null,`This is the "decisions, not options" quick start guide which reflects the author's preferred setup, summarised here in the hope that it simplifies getting started on this multi-language project in the sea of options available.`,-1)),t("p",null,[e[1]||(e[1]=o("Details on other options can be found in the ")),l(s,{to:"/local-dev-deep-dives/setup.html"},{default:a(()=>e[0]||(e[0]=[o("Local Dev Deep Dives")])),_:1}),e[2]||(e[2]=o(" section."))])]),e[30]||(e[30]=t("div",{class:"hint-container warning"},[t("p",{class:"hint-container-title"},"Warning"),t("p",null,"This guide is written for Windows users. MacOS and Linux users will need to slightly adapt some steps and file paths.")],-1)),t("nav",x,[t("ul",null,[t("li",null,[l(i,{to:"#prerequisites"},{default:a(()=>e[5]||(e[5]=[o("Prerequisites")])),_:1})]),t("li",null,[l(i,{to:"#clone-the-repo"},{default:a(()=>e[6]||(e[6]=[o("Clone the repo")])),_:1})]),t("li",null,[l(i,{to:"#set-up-laravel-herd"},{default:a(()=>e[7]||(e[7]=[o("Set up Laravel Herd")])),_:1})]),t("li",null,[l(i,{to:"#install-sass-globally"},{default:a(()=>e[8]||(e[8]=[o("Install Sass globally")])),_:1})]),t("li",null,[l(i,{to:"#install-project-dependencies"},{default:a(()=>e[9]||(e[9]=[o("Install project dependencies")])),_:1})]),t("li",null,[l(i,{to:"#set-up-the-ide"},{default:a(()=>e[10]||(e[10]=[o("Set up the IDE")])),_:1}),t("ul",null,[t("li",null,[l(i,{to:"#plugins"},{default:a(()=>e[11]||(e[11]=[o("Plugins")])),_:1})]),t("li",null,[l(i,{to:"#php-interpreter-and-xdebug"},{default:a(()=>e[12]||(e[12]=[o("PHP Interpreter and Xdebug")])),_:1})]),t("li",null,[l(i,{to:"#terminal"},{default:a(()=>e[13]||(e[13]=[o("Terminal")])),_:1})]),t("li",null,[l(i,{to:"#node"},{default:a(()=>e[14]||(e[14]=[o("Node")])),_:1})]),t("li",null,[l(i,{to:"#scopes"},{default:a(()=>e[15]||(e[15]=[o("Scopes")])),_:1})]),t("li",null,[l(i,{to:"#file-watchers-for-asset-compilation"},{default:a(()=>e[16]||(e[16]=[o("File watchers for asset compilation")])),_:1})]),t("li",null,[l(i,{to:"#linting-and-formatting"},{default:a(()=>e[17]||(e[17]=[o("Linting and formatting")])),_:1})]),t("li",null,[l(i,{to:"#pest"},{default:a(()=>e[18]||(e[18]=[o("Pest")])),_:1})])])]),t("li",null,[l(i,{to:"#update-the-php-ini-file"},{default:a(()=>e[19]||(e[19]=[o("Update the php.ini file")])),_:1})]),t("li",null,[l(i,{to:"#ensure-test-pages-load"},{default:a(()=>e[20]||(e[20]=[o("Ensure test pages load")])),_:1})]),t("li",null,[l(i,{to:"#set-up-playwright"},{default:a(()=>e[21]||(e[21]=[o("Set up Playwright")])),_:1})]),t("li",null,[l(i,{to:"#run-storybook"},{default:a(()=>e[22]||(e[22]=[o("Run Storybook")])),_:1})])])]),e[31]||(e[31]=n(`<h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h2><ul><li>Git installed locally</li><li>Sufficient privileges to install software on your machine.</li></ul><h2 id="clone-the-repo" tabindex="-1"><a class="header-anchor" href="#clone-the-repo"><span>Clone the repo</span></a></h2><ol><li>Create a directory in <code>C:\\Users\\&lt;your-username&gt;</code> called <code>PhpStormProjects</code></li><li>Clone the repo using your GUI of choice (such as <a href="https://www.gitkraken.com/" target="_blank" rel="noopener noreferrer">GitKraken</a>) or via your terminal (from the <code>PhpStormProjects</code> directory):</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">git clone https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/doubleedesign/comet-components<span class="token punctuation">.</span>git</span>
<span class="line"></span></code></pre></div><ol start="3"><li>Create and check out a branch for the work you&#39;re going to do:</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">git checkout <span class="token operator">-</span>b &lt;your-branch-name&gt;</span>
<span class="line"></span></code></pre></div><h2 id="set-up-laravel-herd" tabindex="-1"><a class="header-anchor" href="#set-up-laravel-herd"><span>Set up Laravel Herd</span></a></h2><p>Laravel Herd is an all-in-one local development environment tool for PHP and Node. It takes the place of the likes of WAMP, MAMP, or XAMPP for PHP, and Node Version Manager (NVM) for Node, while also providing <a href="https://getcomposer.org/" target="_blank" rel="noopener noreferrer">Composer</a> and <a href="https://xdebug.org/" target="_blank" rel="noopener noreferrer">Xdebug</a> out of the box.</p><ol><li>If you already have Node installed on your machine, remove it so Herd can install the version of NVM it requires and thus manage Node for you. (Other instances of PHP can stay if you want.)</li><li>Download and install <a href="https://herd.laravel.com/" target="_blank" rel="noopener noreferrer">Laravel Herd Pro</a></li></ol><details class="hint-container details"><summary>Do I really need to pay for Pro?</summary><p>No, but without Pro you won&#39;t have built-in Xdebug, the Dumps feature, or database services.</p><ul><li>Xdebug is required for generating unit test coverage reports</li><li>Dumps is a great debugging tool which is referenced in this documentation</li><li>Database services are required if you want to use Herd to develop websites with WordPress or any other database-driven CMS.</li></ul></details><ol start="3"><li>Make sure Herd is controlling PHP:</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line"><span class="token function">Get-Command</span> php</span>
<span class="line"></span></code></pre></div><p>The output should list the source as <code>C:\\Users\\&lt;your-username&gt;\\.config\\herd\\bin\\php84\\php.exe</code> or similar according to the global PHP version you have set in Herd.</p><details class="hint-container details"><summary>What if my PHP source is not Herd?</summary><p>Go into your system environment variables and move the <code>PATH</code> entry for Herd to the top. Restart PowerShell and try again.</p></details><ol start="4"><li>Make sure Composer is installed and available:</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line"><span class="token function">Get-Command</span> composer</span>
<span class="line"></span></code></pre></div><p>The output should list the source as <code>C:\\Users\\&lt;your-username&gt;\\.config\\herd\\bin\\composer.bat</code>.</p><ol start="5"><li>Make sure Node is installed and available:</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line"><span class="token function">Get-Command</span> node</span>
<span class="line"></span></code></pre></div><p>The output should list the source as <code>C:\\Program Files\\nodejs\\node.exe</code> and the version should match the installed version listed in Herd.</p><p>If you install alternative versions in Herd, change the active version with:</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">nvm use &lt;version&gt;</span>
<span class="line"></span></code></pre></div><ol start="6"><li>Tell Herd where the project is using one of the following methods:</li></ol><ul><li>In the Herd GUI, go to <code>General</code> in the left menu, and add <code>PHPStormProjects</code> the <code>Herd Paths</code>. This will make Herd pick up all directories in <code>PHPStormProjects</code> as projects.</li><li>From the Herd GUI Dashboard, click <code>Open Sites</code> and in the screen that appears, click <code>Add</code> and select the directory you cloned the repo into.</li><li>From the <code>comet-components</code> directory your terminal, type <code>herd link</code>.</li></ul><ol start="7"><li>Open <a href="http://comet-components.test" target="_blank" rel="noopener noreferrer">http://comet-components.test</a> in your web browser. It should load a local copy of these docs.</li></ol><h2 id="install-sass-globally" tabindex="-1"><a class="header-anchor" href="#install-sass-globally"><span>Install Sass globally</span></a></h2><ol><li>Install the <a href="https://chocolatey.org" target="_blank" rel="noopener noreferrer">Chocolatey</a> package manager for Windows if you don&#39;t already have it.</li><li>Install Dart Sass globally:</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">choco install sass</span>
<span class="line"></span></code></pre></div><h2 id="install-project-dependencies" tabindex="-1"><a class="header-anchor" href="#install-project-dependencies"><span>Install project dependencies</span></a></h2><p>The project contains multiple sub-packages, and uses both <a href="https://getcomposer.org/" target="_blank" rel="noopener noreferrer">Composer</a> and <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreferrer">NPM</a> to manage different types of dependencies.</p><p>A convenience script is provided to install all dependencies in the project root and all <code>packages</code>. You can run it from the project root (<code>comet-components</code> directory) with:</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">npm run refresh:all</span>
<span class="line"></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Some of the underling scripts are PowerShell scripts, which have not been tested in non-Windows environments. PowerShell for MacOS exists, but you may need to adapt the script for it to work; or alternatively replace it with a shell script. The source code of all the scripts can be found in the <code>scripts</code> directory in the project root.</p></div><h2 id="set-up-the-ide" tabindex="-1"><a class="header-anchor" href="#set-up-the-ide"><span>Set up the IDE</span></a></h2><p><a href="https://www.jetbrains.com/phpstorm" target="_blank" rel="noopener noreferrer">PhpStorm</a> is a powerful, fully-featured IDE for PHP and JavaScript development and testing. Download and install it.</p><details class="hint-container details"><summary>Do I really have to use PhpStorm? What about VSCode?</summary><p>No, you don&#39;t have to use PhpStorm, but all IDE-specific information in these docs is written for it.</p></details><h3 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins"><span>Plugins</span></a></h3><p>Open PhpStorm and go to <code>File &gt; Settings &gt; Plugins</code>.</p><details class="hint-container details"><summary>Plugins to install and enable</summary><p>Install and activate the following plugins and any dependencies they have:</p><ul><li><a href="https://plugins.jetbrains.com/plugin/20175-test-automation" target="_blank" rel="noopener noreferrer">Test Automation</a></li><li><a href="https://plugins.jetbrains.com/plugin/7320-php-annotations" target="_blank" rel="noopener noreferrer">PHP Annotations</a></li><li><a href="https://plugins.jetbrains.com/plugin/10249-powershell" target="_blank" rel="noopener noreferrer">PowerShell</a></li></ul><p>In <code>File &gt; Settings &gt; Plugins</code>, ensure the following bundled plugins are enabled:</p><ul><li>PHP</li><li>PHP Architecture</li><li>JavaScript and TypeScript</li><li>Node.js</li><li>Vue.js</li><li>Ini</li><li>JSON</li><li>CSS</li><li>Sass</li><li>Blade</li><li>Pest</li><li>Terminal</li></ul></details><h3 id="php-interpreter-and-xdebug" tabindex="-1"><a class="header-anchor" href="#php-interpreter-and-xdebug"><span>PHP Interpreter and Xdebug</span></a></h3><ol><li>In <code>File &gt; Settings &gt; PHP</code>, click the 3 dot button next to the <code>CLI Interpreter</code> dropdown.</li><li>Add the Path to Herd&#39;s PHP <code>.bat</code> file so that it will use the global PHP version set in Herd.</li><li>Click the refresh button and make sure it has picked up the version, configuration file, and Xdebug correctly. If it does not detect Xdebug, you can manually add the path to it as shown in the below screenshot.</li></ol><p><img src="`+m+`" alt="PHP interpreter settings"></p><h3 id="terminal" tabindex="-1"><a class="header-anchor" href="#terminal"><span>Terminal</span></a></h3><ol><li>Go to <code>File &gt; Settings &gt; Tools &gt; Terminal</code>.</li><li>Tick <code>Use new terminal</code> to use the <a href="https://blog.jetbrains.com/idea/2024/02/the-new-terminal-beta-is-now-in-jetbrains-ides/" target="_blank" rel="noopener noreferrer">JetBrains terminal</a>.</li><li>In the <code>Start directory</code> field, enter the path to your project root (e.g., <code>C:\\Users\\&lt;your-username&gt;\\PhpStormProjects\\comet-components</code>).</li><li>In the <code>Shell path</code> field, select or enter the path to PowerShell.</li><li>Tick <code>Shell integration</code>.</li><li>Tick <code>Add default PHP interpreter to PATH</code> (it should already be there but it can&#39;t hurt to tick it).</li><li>Tick <code>Add node_modules/.bin</code> from the project root to PATH.</li></ol><div class="hint-container info"><p class="hint-container-title">Info</p><p>PhpStorm will pick up the version bundled with Windows, which at the time of writing is PowerShell 5.1. If you have installed Powershell 7 yourself, you can enter the path to the executable manually.</p><p>If you installed via the Windows Store this should be:</p><div class="language-text" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">C:\\Users\\&lt;your-username&gt;\\AppData\\Local\\Microsoft\\WindowsApps\\pwsh.exe</span>
<span class="line"></span></code></pre></div></div><div class="hint-container tip"><p class="hint-container-title">Tip: Terminal colours</p><p>If you tick <code>Use new terminal</code>, the prompt and output will look different to a standalone PowerShell window. To customise the colours:</p><ol><li>Go to <code>File &gt; Settings &gt; Editor &gt; Color Scheme &gt; Console Colors</code>.</li><li>In the list, expand <code>Block terminal</code> and go through the list of colours there to make your changes. <strong>Note:</strong> At the time of writing, these colours are <em>not</em> shown in the preview below the list, and the ANSI colours, console colours, etc. defined there do not apply to the new terminal.</li></ol><p><img src="`+f+'" alt="Terminal colour settings"></p></div>',47)),t("details",j,[e[27]||(e[27]=t("summary",null,"Do I have to use PowerShell?",-1)),e[28]||(e[28]=t("p",null,"No, but you may need to adapt some commands and scripts for your shell of choice.",-1)),t("ul",null,[e[26]||(e[26]=t("li",null,"CMD? Amateur hour - just use PowerShell, it comes with Windows.",-1)),t("li",null,[e[24]||(e[24]=o("WSL? Hardcore, I like it. Instructions for almost all steps using WSL are available in the ")),l(s,{to:"/local-dev-deep-dives/setup.html"},{default:a(()=>e[23]||(e[23]=[o("Local setup deep dives")])),_:1}),e[25]||(e[25]=o(" section. (But be warned: A lot of them just route commands through PowerShell anyway, as integration of all tooling such as the IDE, PHP, Xdebug, Node, and Playwright is easier if you use the native Windows instances of things installed by Herd.)"))])])]),e[32]||(e[32]=n('<p><img src="'+w+'" alt="Terminal settings for PowerShell"></p><h3 id="node" tabindex="-1"><a class="header-anchor" href="#node"><span>Node</span></a></h3><p>Enable Node.js support in <code>File &gt; Settings &gt; Languages &amp; Frameworks &gt; Node.js</code>:</p><ul><li>In the <code>Node interpreter</code> dropdown, ensure <code>C:\\Program Files\\nodejs\\node.exe</code> is selected.</li><li>Tick <code>Coding assistance for Node.js</code>.</li></ul><p><img src="'+b+'" alt="Node settings"></p><h3 id="scopes" tabindex="-1"><a class="header-anchor" href="#scopes"><span>Scopes</span></a></h3><p>Scopes are used to limit the scope of file watchers and other settings to specific directories. Configuration for the core package and the WordPress plugin is included in the <code>.idea</code> directory in the project root, so PhpStorm should pick them up automatically. If not, or you need to create a new scope for your implementation:</p><ol><li>Go to <code>File &gt; Settings &gt; Appearance &amp; Behaviour &gt; Scopes</code>.</li><li>Click the <code>Add (+ plus sign)</code> button and select <code>Local</code>.</li><li>Enter a name for the scope (e.g., <code>Core Package</code>).</li><li>Select the directories you want to include in the scope (e.g., <code>packages/core</code>) and click <code>Include recursively</code>.</li><li>In the top right corner, tick <code>Share through VCS</code> to ensure the scope is included in the project&#39;s Git repository.</li></ol><p><img src="'+v+`" alt="Scope settings example"></p><h3 id="file-watchers-for-asset-compilation" tabindex="-1"><a class="header-anchor" href="#file-watchers-for-asset-compilation"><span>File watchers for asset compilation</span></a></h3><div class="hint-container info"><p class="hint-container-title">Info</p><p>File watcher configurations for Sass, Rollup, and Blade template formatting are included in the <code>.idea/watcherTasks.xml</code> file in the project root, so PhpStorm should pick them up automatically. The details are listed below for your understanding and future reference.</p></div><details class="hint-container details"><summary>Sass</summary><p>PhpStorm will probably prompt you to set up a file watcher when you open a <code>.scss</code> file for the first time, but you can also find or create the configuration in <code>File &gt; Settings &gt; Tools &gt; File Watchers</code>.</p><p>To automatically compile individual SCSS files in the core package into CSS files in the same location (for example, <code>./src/components/global.scss</code> to <code>./src/components/global.css</code>), follow these steps:</p><ol><li>Go to <code>File &gt; Settings &gt; Tools &gt; File Watchers</code>.</li><li>Click the <code>Add (+ plus sign)</code> button and select <code>SCSS</code>.</li><li>In the <code>File Type</code> dropdown, select <code>SCSS style sheet</code>.</li><li>Uncheck <code>Track only root files</code>.</li><li>In the <code>Scope</code> dropdown, select <code>Core package</code>.</li><li>In the <code>Program</code> field, enter the path to the Sass executable that you installed in step 3:</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">C:\\ProgramData\\chocolatey\\bin\\sass</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="7"><li>In the <code>Arguments</code> field, enter <code>--color --source-map $FileName$:$FileNameWithoutExtension$.css</code>.</li><li>In the <code>Output paths</code> field, enter <code>$FileNameWithoutExtension$.css:$FileNameWithoutExtension$.css.map</code>.</li><li>In the <code>Working directory</code> field, enter <code>$FileDir$</code>.</li><li>Under <code>Advanced Options</code>, tick <code>Auto-save edited files to trigger the watcher</code> and <code>Trigger the watcher on external changes</code>.</li><li>For <code>Show console</code>, select <code>On error</code>.</li><li>Click <code>OK</code> to save the watcher.</li></ol><p><strong>Note:</strong> The variables surrounded by <code>$</code> are variables that PhpStorm will replace with the actual file names when it runs the watcher. Do not replace these manually with your actual file names.</p><p><img src="`+y+`" alt="Sass file watcher"></p></details><details class="hint-container details"><summary>Rollup</summary><p>Rollup is a JavaScript bundler that is used to bundle the core package&#39;s JavaScript into one file, to make it easier for implementations to use. It is installed with the project dependencies.</p><p>You can set up PhpStorm to automatically run Rollup when you save a JavaScript file like so:</p><ol><li>Go to <code>File &gt; Settings &gt; Tools &gt; File Watchers</code>.</li><li>Click the <code>Add (+ plus sign)</code> button and select <code>Custom</code>.</li><li>In the <code>File Type</code> dropdown, select <code>JavaScript</code>.</li><li>For the <code>Scope</code>, select <code>Core Package</code>.</li><li>In the <code>Program</code> field, enter the path to the Rollup executable:</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">$ProjectFileDir$\\packages\\core\\node_modules\\.bin\\rollup</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>(Note: <code>$ProjectFileDir$</code> is a real variable that resolves to the project root directory, you don&#39;t need to manually replace that with your actual path.)</p><ol start="6"><li>In the <code>Arguments</code> field, enter <code>-c</code> to use the configuration file in the project root.</li><li>In the <code>Output paths</code> field, enter <code>$ProjectFileDir$\\packages\\core\\dist\\dist.js</code> (this is the output file for the bundled JavaScript).</li><li>In the <code>Working directory</code> field, enter <code>$ProjectFileDir$\\packages\\core</code>.</li><li>Under <code>Advanced Options</code>, tick <code>Auto-save edited files to trigger the watcher</code> and <code>Trigger the watcher on external changes</code>.</li><li>For <code>Show console</code>, select <code>On error</code>.</li><li>Click <code>OK</code> to save the watcher.</li></ol><p><img src="`+d+'" alt="Rollup file watcher"></p></details><h3 id="linting-and-formatting" tabindex="-1"><a class="header-anchor" href="#linting-and-formatting"><span>Linting and formatting</span></a></h3><p>A combination of tools and configurations are provided to ensure consistent code formatting across the project.</p><details class="hint-container details"><summary>PHP (General) - PhpStorm formatter</summary><ol><li>Go to <code>File &gt; Settings &gt; Editor &gt; Code Style &gt; PHP</code></li><li>Ensure the <code>Project</code> scheme is selected in the dropdown at the top.</li><li>Go to <code>File &gt; Settings &gt; Actions on save</code>.</li><li>Tick <code>Reformat code</code>.</li><li>In the <code>Reformat code</code> option, open the <code>File types</code> list and <strong>untick</strong> Blade, JavaScript, and TypeScript. Ensure PHP <em>is</em> ticked.</li></ol><p>[<img src="'+k+`" alt="PHPStorm PHP code style settings"></p></details><details class="hint-container details"><summary>Blade templates - Blade formatter</summary><p><a href="https://github.com/shufo/blade-formatter" target="_blank" rel="noopener noreferrer">Blade Formatter</a> is a third-party tool installed as a core package dependency, with configuration defined in the <code>./packages/core/.bladeformatterrc.json</code> file.</p><p>To configure PhpStorm to automatically format Blade templates on save, follow these steps:</p><ol><li>Go to <code>File &gt; Settings &gt; Tools &gt; File Watchers</code>.</li><li>Click the <code>Add (+ plus sign)</code> button and select <code>Custom</code>.</li><li>In the <code>File Type</code> dropdown, select <code>Blade</code>.</li><li>For the <code>Scope</code>, select <code>Core Package</code>.</li><li>In the <code>Program</code> field, enter <code>powershell.exe</code>.</li><li>In the <code>Arguments</code> field, enter:</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line"><span class="token string">&quot;<span class="token variable">$ProjectFileDir</span>$\\packages\\core\\node_modules\\.bin\\blade-formatter.ps1&quot;</span> <span class="token operator">--</span><span class="token function">write</span> <span class="token string">&quot;<span class="token variable">$FilePath</span>$&quot;</span></span>
<span class="line"></span></code></pre></div><p><strong>Note:</strong> <code>$ProjectFileDir$</code> is a variable that PhpStorm will replace with the real path when it runs the watcher. You not replace this manually with your actual path.</p><ol start="7"><li>In the <code>Output paths to refresh</code> field, enter <code>$FileName$</code>.</li><li>In the <code>Working directory</code> field, enter <code>$FileDir$</code>.</li><li>Under <code>Advanced Options</code>, tick <code>Auto-save edited files to trigger the watcher</code> and <code>Trigger the watcher on external changes</code>.</li><li>For <code>Show console</code>, select <code>On error</code>.</li><li>Click <code>OK</code> to save the watcher.</li></ol><p><img src="`+c+'" alt="Blade file watcher"></p></details><details class="hint-container details"><summary>JavaScript and TypeScript - ESLint</summary><p><a href="https://eslint.org/" target="_blank" rel="noopener noreferrer">ESLint</a> is installed as a project dependency and configuration for linting and formatting JavaScript and TypeScript code is defined in <code>./eslint.config.js</code>.</p><p>Configure PhpStorm to run ESLint on save and fix issues automatically where possible by following these steps:</p><ol><li>Go to <code>File &gt; Settings &gt; Languages &amp; Frameworks &gt; JavaScript &gt; Code Quality Tools &gt; ESLint</code>.</li><li>Select <code>Automatic ESLint configuration</code>.</li><li>Tick <code>Run eslint --fix on save</code>.</li></ol></details><h3 id="pest" tabindex="-1"><a class="header-anchor" href="#pest"><span>Pest</span></a></h3><p>Configuration of Pest/PHPUnit is mostly handled in its configuration file (<code>./test/phpunit.xml</code>) and the Run configuration.</p><p>You can check and tweak the default settings for PhpStorm under <code>File &gt; Settings &gt; Languages &amp; Frameworks &gt; PHP &gt; Test Frameworks</code> (shown below) and for the run configuration under <code>Run &gt; Edit Configurations</code>.</p><p><img src="'+p+`" alt="Pest settings"></p><h2 id="update-the-php-ini-file" tabindex="-1"><a class="header-anchor" href="#update-the-php-ini-file"><span>Update the <code>php.ini</code> file</span></a></h2><p>Locate the PHP configuration file (as per the PHP interpreter settings above) and add the following lines to it (updated with your username):</p><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code><span class="line"><span class="token key attr-name">herd_auto_prepend_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">C:/Users/YOUR_USERNAME/PHPStormProjects/comet-components/test/browser/wrapper-open.php</span></span>
<span class="line"><span class="token key attr-name">herd_auto_append_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">C:/Users/YOUR_USERNAME/PHPStormProjects/comet-components/test/browser/wrapper-close.php</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is to wrap test pages with the required opening and closing HTML.</p><h2 id="ensure-test-pages-load" tabindex="-1"><a class="header-anchor" href="#ensure-test-pages-load"><span>Ensure test pages load</span></a></h2><p>Navigate to a test page such as <a href="http://comet-components.test/test/browser/pages/container-colours.php" target="_blank" rel="noopener noreferrer">http://comet-components.test/test/browser/pages/container-colours.php</a> in your browser. You should see the page content with styling applied.</p><h2 id="set-up-playwright" tabindex="-1"><a class="header-anchor" href="#set-up-playwright"><span>Set up Playwright</span></a></h2><p>Playwright itself should be installed in the project by the refresh script listed above, but you may need to install the browsers it uses.</p><ol><li>To install a browser for Playwright, in the location it expects to find it, with the following command:</li></ol><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">npx playwright install firefox</span>
<span class="line"></span></code></pre></div><ol start="2"><li><p>Ensure the <code>BROWSER_TEST_URL</code> in the <code>.env</code> file in the project root is set to <code>http://comet-components.test</code>.</p></li><li><p>In PhpStorm, ensure it understands Playwright for syntax highlighting and code completion by following these steps:</p></li></ol><ul><li>add Playwright to the JS libraries under <code>Settings &gt; Languages &amp; Frameworks &gt; JavaScript &gt; Libraries</code>. Include all of <code>@playwright/test</code>, <code>playwright</code>, and <code>playwright-core</code>.</li><li>In <code>Settings &gt; Languages &amp; Frameworks &gt; TypeScript</code>, uncheck <code>use types from server</code>.</li></ul><h2 id="run-storybook" tabindex="-1"><a class="header-anchor" href="#run-storybook"><span>Run Storybook</span></a></h2><p>The refresh script should have installed the dependencies for Storybook. Run it locally with:</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">npm run storybook</span>
<span class="line"></span></code></pre></div>`,37))])}const F=h(P,[["render",I]]),N=JSON.parse('{"path":"/development-core/setup.html","title":"Local dev setup","lang":"en-AU","frontmatter":{"title":"Local dev setup","position":1,"showInPageNav":true},"headers":[{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Clone the repo","slug":"clone-the-repo","link":"#clone-the-repo","children":[]},{"level":2,"title":"Set up Laravel Herd","slug":"set-up-laravel-herd","link":"#set-up-laravel-herd","children":[]},{"level":2,"title":"Install Sass globally","slug":"install-sass-globally","link":"#install-sass-globally","children":[]},{"level":2,"title":"Install project dependencies","slug":"install-project-dependencies","link":"#install-project-dependencies","children":[]},{"level":2,"title":"Set up the IDE","slug":"set-up-the-ide","link":"#set-up-the-ide","children":[{"level":3,"title":"Plugins","slug":"plugins","link":"#plugins","children":[]},{"level":3,"title":"PHP Interpreter and Xdebug","slug":"php-interpreter-and-xdebug","link":"#php-interpreter-and-xdebug","children":[]},{"level":3,"title":"Terminal","slug":"terminal","link":"#terminal","children":[]},{"level":3,"title":"Node","slug":"node","link":"#node","children":[]},{"level":3,"title":"Scopes","slug":"scopes","link":"#scopes","children":[]},{"level":3,"title":"File watchers for asset compilation","slug":"file-watchers-for-asset-compilation","link":"#file-watchers-for-asset-compilation","children":[]},{"level":3,"title":"Linting and formatting","slug":"linting-and-formatting","link":"#linting-and-formatting","children":[]},{"level":3,"title":"Pest","slug":"pest","link":"#pest","children":[]}]},{"level":2,"title":"Update the php.ini file","slug":"update-the-php-ini-file","link":"#update-the-php-ini-file","children":[]},{"level":2,"title":"Ensure test pages load","slug":"ensure-test-pages-load","link":"#ensure-test-pages-load","children":[]},{"level":2,"title":"Set up Playwright","slug":"set-up-playwright","link":"#set-up-playwright","children":[]},{"level":2,"title":"Run Storybook","slug":"run-storybook","link":"#run-storybook","children":[]}],"git":{"updatedTime":1744288897000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":3}],"changelog":[{"hash":"d100059a772abdb7a8c7ba6c4d0b8dad9c725196","time":1744288897000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Chore: Update docs build"},{"hash":"45a77315c51e6532f20bf311c3ac48f46126e436","time":1744275231000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Simplify Storybook/testing setup by removing the need for symlinks"},{"hash":"7d15f09f18c9133c0dce33d0572fe87f1ab2f50c","time":1743834499000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Add to quick start detail page; improve overall navigation incl. adding in-page sticky menu for some pages"}]},"filePathRelative":"development-core/setup.md"}');export{F as comp,N as data};
