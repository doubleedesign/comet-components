import{_ as m,c as g,b as e,a as p,e as i,d as s,w as l,r as u,o as f}from"./app-xU4ltgwT.js";const v="/docs/windows-path.png",w="/docs/assets/herd-dashboard-DyjBQieW.png",c={},b={class:"hint-container important"},y={class:"table-of-contents"},P={class:"hint-container tip"},S={class:"hint-container details"},k={class:"hint-container details"};function A(W,t){const o=u("RouteLink"),r=u("router-link"),d=u("Tabs"),h=u("Badge");return f(),g("div",null,[t[57]||(t[57]=e("h1",{id:"detailed-options-for-local-development",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#detailed-options-for-local-development"},[e("span",null,"Detailed options for local development")])],-1)),e("div",b,[t[3]||(t[3]=e("p",{class:"hint-container-title"},"Important",-1)),t[4]||(t[4]=e("p",null,"This is the entry point for the detailed, multi-option setup instructions I originally wrote when working out the requirements and my optimal setup and workflow for this project.",-1)),e("p",null,[t[1]||(t[1]=s('If you prefer a prescriptive, "decisions, not options" quick start guide, you can find that in the ')),i(o,{to:"/development/setup.html"},{default:l(()=>t[0]||(t[0]=[s("Local Dev Quick Start")])),_:1}),t[2]||(t[2]=s(" section."))])]),e("nav",y,[e("ul",null,[e("li",null,[i(r,{to:"#prerequisites"},{default:l(()=>t[5]||(t[5]=[s("Prerequisites")])),_:1})]),e("li",null,[i(r,{to:"#setup"},{default:l(()=>t[6]||(t[6]=[s("Setup")])),_:1})]),e("li",null,[i(r,{to:"#windows-setup-deep-dive"},{default:l(()=>t[7]||(t[7]=[s("Windows setup deep-dive")])),_:1}),e("ul",null,[e("li",null,[i(r,{to:"#detailed-tooling-setup-guides"},{default:l(()=>t[8]||(t[8]=[s("Detailed tooling setup guides")])),_:1})]),e("li",null,[i(r,{to:"#general-notes-and-troubleshooting-tips"},{default:l(()=>t[9]||(t[9]=[s("General notes and troubleshooting tips")])),_:1})])])])])]),t[58]||(t[58]=p('<h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites"><span>Prerequisites</span></a></h2><ul><li>PHP and <a href="https://getcomposer.org" target="_blank" rel="noopener noreferrer">Composer</a> installed locally</li><li><a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node</a> installed locally</li><li>Git installed locally</li><li><a href="https://sass-lang.com" target="_blank" rel="noopener noreferrer">Sass</a> installed globally on your machine</li><li>IDE of choice (using <a href="https://www.jetbrains.com/phpstorm/" target="_blank" rel="noopener noreferrer">PhpStorm</a> is documented throughout this site)</li></ul><div class="hint-container note"><p class="hint-container-title">Note</p><p>The author of Comet Components is a Windows user and <a href="https://www.jetbrains.com/phpstorm/" target="_blank" rel="noopener noreferrer">PhpStorm</a> is her IDE of choice. While many of the instructions in this documentation and the convenience scripts provided are platform-agnostic (as she uses <a href="https://learn.microsoft.com/en-us/windows/wsl/" target="_blank" rel="noopener noreferrer">WSL</a> which provides a Bash terminal, and many of the scripts are written in PHP or TypeScript), there are some things that developers using MacOS, Linux, and/or non-JetBrains IDEs will need to adapt for their own environments.</p></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Windows-specific setup options and instructions are listed in the <a href="#windows-setup-deep-dive">Windows setup deep-dive</a> section below.</p></div><h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>Setup</span></a></h2><ol><li>Clone the repository from GitHub</li><li>Install dependencies, refresh autoloading, and redo symlinks:</li></ol>',6)),i(d,{id:"69",data:[{id:"WSL (Bash)"},{id:"PowerShell"}],"tab-id":"shell"},{title0:l(({value:n,isActive:a})=>t[10]||(t[10]=[s("WSL (Bash)")])),title1:l(({value:n,isActive:a})=>t[11]||(t[11]=[s("PowerShell")])),tab0:l(({value:n,isActive:a})=>t[12]||(t[12]=[e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"npm"),s(" run refresh:all")]),s(`
`),e("span",{class:"line"})])])],-1)])),tab1:l(({value:n,isActive:a})=>t[13]||(t[13]=[e("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"npm run refresh:all"),s(`
`),e("span",{class:"line"})])])],-1)])),_:1}),e("p",null,[t[15]||(t[15]=s("See the ")),i(o,{to:"/local-dev-deep-dives/appendices/cli-commands.html"},{default:l(()=>t[14]||(t[14]=[s("CLI command quick reference")])),_:1}),t[16]||(t[16]=s(" for more options if you are returning to an already set up copy of the project and don't need to do a full refresh."))]),t[59]||(t[59]=e("ol",{start:"3"},[e("li",null,"Run the local web server and Storybook (at the same time i.e. two terminal windows) to see what you're working with!")],-1)),i(d,{id:"87",data:[{id:"WSL (Bash)"},{id:"PowerShell"}],"tab-id":"shell"},{title0:l(({value:n,isActive:a})=>t[17]||(t[17]=[s("WSL (Bash)")])),title1:l(({value:n,isActive:a})=>t[18]||(t[18]=[s("PowerShell")])),tab0:l(({value:n,isActive:a})=>t[19]||(t[19]=[e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"npm"),s(" run test:server")]),s(`
`),e("span",{class:"line"})])])],-1),e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"npm"),s(" run test:storybook")]),s(`
`),e("span",{class:"line"})])])],-1)])),tab1:l(({value:n,isActive:a})=>t[20]||(t[20]=[e("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"npm run test:server"),s(`
`),e("span",{class:"line"})])])],-1),e("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"npm run test:storybook"),s(`
`),e("span",{class:"line"})])])],-1)])),_:1}),e("div",P,[t[26]||(t[26]=e("p",{class:"hint-container-title"},"Tips",-1)),e("p",null,[t[22]||(t[22]=s("You can also run the project as a ")),t[23]||(t[23]=e("a",{href:"https://herd.laravel.com",target:"_blank",rel:"noopener noreferrer"},"Laravel Herd",-1)),t[24]||(t[24]=s(" site instead of running the basic local server, which enables you to use features like Herd's Dumps for debugging. See the ")),i(o,{to:"/local-dev-deep-dives/testing/browser-testing.html"},{default:l(()=>t[21]||(t[21]=[s("Browser Testing")])),_:1}),t[25]||(t[25]=s(" documentation for more details."))])]),t[60]||(t[60]=e("ol",{start:"4"},[e("li",null,"Optionally, run these docs locally:")],-1)),i(d,{id:"109",data:[{id:"WSL (Bash)"},{id:"PowerShell"}],"tab-id":"shell"},{title0:l(({value:n,isActive:a})=>t[27]||(t[27]=[s("WSL (Bash)")])),title1:l(({value:n,isActive:a})=>t[28]||(t[28]=[s("PowerShell")])),tab0:l(({value:n,isActive:a})=>t[29]||(t[29]=[e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"npm"),s(" run docs")]),s(`
`),e("span",{class:"line"})])])],-1)])),tab1:l(({value:n,isActive:a})=>t[30]||(t[30]=[e("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"npm run docs"),s(`
`),e("span",{class:"line"})])])],-1)])),_:1}),t[61]||(t[61]=p('<h2 id="windows-setup-deep-dive" tabindex="-1"><a class="header-anchor" href="#windows-setup-deep-dive"><span>Windows setup deep-dive</span></a></h2><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>As a first step, I&#39;d recommend installing <a href="https://community.chocolatey.org/" target="_blank" rel="noopener noreferrer">Chocolatey</a> if you haven&#39;t already.</p><p>If you prefer to do things using a GUI where possible, you might like to use <a href="https://herd.laravel.com/windows" target="_blank" rel="noopener noreferrer">Laravel Herd</a>. If you don&#39;t have existing instances of PHP, Composer, or Node installed, the latter basically gets you up and running out-of-the-box.</p></div><p>It is not essential to follow the steps in the below-linked guides or to use this exact setup, but this information may be helpful if you are new to any of the tools or technologies listed here, or are new to using a Windows machine for web development.</p><h3 id="detailed-tooling-setup-guides" tabindex="-1"><a class="header-anchor" href="#detailed-tooling-setup-guides"><span>Detailed tooling setup guides</span></a></h3>',4)),e("ul",null,[e("li",null,[i(o,{to:"/local-dev-deep-dives/tooling/php.html"},{default:l(()=>t[31]||(t[31]=[s("PHP development setup on Windows")])),_:1})]),e("li",null,[i(o,{to:"/local-dev-deep-dives/tooling/node.html"},{default:l(()=>t[32]||(t[32]=[s("Node development setup on Windows")])),_:1})]),e("li",null,[i(h,{type:"info",text:"Optional",vertical:"middle"}),t[34]||(t[34]=s()),i(o,{to:"/local-dev-deep-dives/tooling/phpstorm.html"},{default:l(()=>t[33]||(t[33]=[s("PhpStorm setup")])),_:1})]),e("li",null,[i(h,{type:"info",text:"Optional",vertical:"middle"}),t[36]||(t[36]=s()),i(o,{to:"/local-dev-deep-dives/tooling/wsl.html"},{default:l(()=>t[35]||(t[35]=[s("WSL setup")])),_:1})])]),t[62]||(t[62]=e("h3",{id:"general-notes-and-troubleshooting-tips",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#general-notes-and-troubleshooting-tips"},[e("span",null,"General notes and troubleshooting tips")])],-1)),e("details",S,[t[50]||(t[50]=p('<summary>About the PATH system environment variable</summary><p>Making things like PHP and Composer available to Windows terminals generally involves adding their directory locations to your system <code>path</code> environment variable (often referred to as <code>PATH</code> in uppercase, even though Windows 11 calls it <code>Path</code> in the GUI).</p><p>Most installation methods handle this automatically, but there may be times that you need to add, delete, or change these paths manually, such as when:</p><ul><li>you have multiple instances of PHP or Composer installed and your terminal aliases aren&#39;t using the one you want</li><li>you want to use an instance that doesn&#39;t automatically get added to the PATH, or it was optional during installation and you chose not to add it</li></ul><p>You can find the GUI for these settings in Control Panel &gt; System &gt; Advanced System Settings &gt; Environment Variables. (Or just search for &quot;environment variables&quot; in the Start menu.)</p><p>The below example shows the path to Laravel Herd in my user PATH variable. This is the default location for PHP and Composer when installed with Herd. (You can also see that <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener noreferrer">NVM for Windows</a> and <a href="https://localwp.com/" target="_blank" rel="noopener noreferrer">Local by Flywheel</a>&#39;s PHP instance are also there.)</p><p><img src="'+v+'" alt="path.png"></p><p><strong>Note:</strong> In some cases, these variables will be in the system PATH rather than the user PATH.</p><p>With multiple PHP instances available here, I can confirm which is being used with the terminal alias (i.e., when I type a <code>php</code> command) as per the below.</p><p>These are the same for finding Node, Composer, and other tools with a terminal alias, which is particularly useful when it&#39;s not listed specifically in the <code>PATH</code> - which is expected when Herd is controlling it (all that&#39;s in the PATH for that is <code>C:\\Users\\username\\.config\\herd\\bin</code>).</p>',10)),i(d,{id:"194",data:[{id:"WSL (Bash)"},{id:"PowerShell"},{id:"Laravel Herd"}],"tab-id":"shell"},{title0:l(({value:n,isActive:a})=>t[37]||(t[37]=[s("WSL (Bash)")])),title1:l(({value:n,isActive:a})=>t[38]||(t[38]=[s("PowerShell")])),title2:l(({value:n,isActive:a})=>t[39]||(t[39]=[s("Laravel Herd")])),tab0:l(({value:n,isActive:a})=>[t[45]||(t[45]=e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[s("readlink "),e("span",{class:"token parameter variable"},"-f"),s(),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),e("span",{class:"token function"},"which"),s(" php"),e("span",{class:"token variable"},")")])]),s(`
`),e("span",{class:"line"})])])],-1)),t[46]||(t[46]=e("p",null,[s("⚠️ "),e("strong",null,"Warning:"),s(" WSL is not aware of the "),e("code",null,"PATH"),s(" settings unless you set up aliases to Windows executables that are. By default, it will look for instances you have installed in WSL itself.")],-1)),e("p",null,[t[41]||(t[41]=s("To use the same versions as native Windows applications (such as Herd and PhpStorm) you can set up aliases to those. You can also set up aliases that go directly to specific executables, in which case it will also ignore ")),t[42]||(t[42]=e("code",null,"PATH",-1)),t[43]||(t[43]=s(" variables. See the ")),i(o,{to:"/local-dev-deep-dives/tooling/wsl.html"},{default:l(()=>t[40]||(t[40]=[s("WSL setup guide")])),_:1}),t[44]||(t[44]=s(" for more information."))]),t[47]||(t[47]=e("p",null,"For these reasons, if you switch between WSL and PowerShell you may get different results.",-1))]),tab1:l(({value:n,isActive:a})=>t[48]||(t[48]=[e("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"Get-Command"),s(" php")]),s(`
`),e("span",{class:"line"})])])],-1),e("p",null,[s("⚠️ "),e("strong",null,"Warning:"),s(" PowerShell in the PhpStorm terminal may pick up the version set as PhpStorm's CLI interpreter, rather than what you have set in your"),e("br"),e("code",null,"PATH"),s(". There are two key PhpStorm settings that control this, which you can find in Settings > Tools > Terminal:")],-1),e("ul",null,[e("li",null,"Add default project PHP interpreter to PATH"),e("li",null,"Shell integration.")],-1),e("p",null,[s("If both of these are on, PowerShell will use the version set in PhpStorm and ignore anything else in your "),e("code",null,"PATH"),s(),e("em",null,"when used in the PhpStorm terminal"),s(". Running a standalone PowerShell window will always use the version in your "),e("code",null,"PATH"),s(".")],-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Add project interpreter to PATH"),e("th",null,"Shell integration"),e("th",null,"PowerShell behaviour within PhpStorm terminal")])]),e("tbody",null,[e("tr",null,[e("td",null,"On"),e("td",null,"On"),e("td",null,"PHP version set in PhpStorm settings")]),e("tr",null,[e("td",null,"On"),e("td",null,"Off"),e("td",null,[s("System default PHP version as per "),e("code",null,"PATH")])]),e("tr",null,[e("td",null,"Off"),e("td",null,"On"),e("td",null,[s("System default PHP version as per "),e("code",null,"PATH")])]),e("tr",null,[e("td",null,"Off"),e("td",null,"Off"),e("td",null,[s("System default PHP version as per "),e("code",null,"PATH")])])])],-1)])),tab2:l(({value:n,isActive:a})=>t[49]||(t[49]=[e("p",null,[s("You can see the currently selected PHP version in the Dashboard:"),e("br"),e("img",{src:w,alt:"herd-dashboard.png"})],-1),e("p",null,[s("⚠️ "),e("strong",null,"Warning:"),s(" If you have other instances of PHP in your "),e("code",null,"PATH"),s(", this might not be the one your terminal is using. Move it to the top of the list and confirm using the terminal commands.")],-1)])),_:1})]),e("details",k,[t[55]||(t[55]=e("summary",null,"Installing Playwright browsers for integration tests",-1)),i(d,{id:"300",data:[{id:"WSL (Bash)"},{id:"PowerShell"}],"tab-id":"shell"},{title0:l(({value:n,isActive:a})=>t[51]||(t[51]=[s("WSL (Bash)")])),title1:l(({value:n,isActive:a})=>t[52]||(t[52]=[s("PowerShell")])),tab0:l(({value:n,isActive:a})=>t[53]||(t[53]=[e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# Bash command to come")]),s(`
`),e("span",{class:"line"})])])],-1)])),tab1:l(({value:n,isActive:a})=>t[54]||(t[54]=[e("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# Use a seprate PowerShell terminal with admin rights")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This will install the browsers in C:/Users/username/AppData/Local/ms-playwright")]),s(`
`),e("span",{class:"line"},"npx playwright install firefox"),s(`
`),e("span",{class:"line"})])])],-1)])),_:1})]),t[63]||(t[63]=e("p",null,"See also:",-1)),e("ul",null,[e("li",null,[i(o,{to:"/local-dev-deep-dives/troubleshooting.html"},{default:l(()=>t[56]||(t[56]=[s("Troubleshooting")])),_:1})])])])}const T=m(c,[["render",A]]),L=JSON.parse('{"path":"/local-dev-deep-dives/setup.html","title":"Detailed options for local dev","lang":"en-AU","frontmatter":{"title":"Detailed options for local dev","position":1},"headers":[{"level":2,"title":"Prerequisites","slug":"prerequisites","link":"#prerequisites","children":[]},{"level":2,"title":"Setup","slug":"setup","link":"#setup","children":[]},{"level":2,"title":"Windows setup deep-dive","slug":"windows-setup-deep-dive","link":"#windows-setup-deep-dive","children":[{"level":3,"title":"Detailed tooling setup guides","slug":"detailed-tooling-setup-guides","link":"#detailed-tooling-setup-guides","children":[]},{"level":3,"title":"General notes and troubleshooting tips","slug":"general-notes-and-troubleshooting-tips","link":"#general-notes-and-troubleshooting-tips","children":[]}]}],"git":{"updatedTime":1743766162000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":10}],"changelog":[{"hash":"9327d3d2a273c6125f395c48ab9acfe1e6b6df85","time":1743766162000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Add quick start dev guide, move detail pages, and simplify sidebar"},{"hash":"c792c91e35f07889db6d9effc5cb18aee2dc44f8","time":1743431150000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Update code syntax highlighting; misc doc tweaks"},{"hash":"e918bf058917be304d69e468a11b814ae7504cff","time":1743331328000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: More doc tweaks"},{"hash":"c57f08f4073ef4a64aa9bc79d49a375d4a86a775","time":1743310427000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Tooling: Enable using Herd for viewing test pages and using its Dumps for debugging"},{"hash":"a2519aef7d7ea6c5cda3c66142eba8ed17fcf14a","time":1743250619000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Fix(Docs): Fix unwanted hard wraps; Docs: Add links to intro"},{"hash":"4fda7f5158eab97de8674c8ee0e915539ee998b9","time":1743203983000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Add PHP architecture overview; update page order and other tweaks"},{"hash":"8b540960a2d2a19bf7530fc92ee7e0b606d5a3cb","time":1742900302000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Various doc tweaks"},{"hash":"9c76f49464456e960a99f71a3dfa8a3a8ffd612f","time":1742796937000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Test-driven padding improvements"},{"hash":"bd46ea421c43d7241b0682e551b9810fce24a5c8","time":1742709938000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Finish migrating docs to VuePress"},{"hash":"593c083e86d6a8baa7e78e6af98e148d7f5d69b9","time":1742624410000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"More work on new docs; WIP on updating and improving doc generation for abstract classes/traits/types"}]},"filePathRelative":"local-dev-deep-dives/setup.md"}');export{T as comp,L as data};
