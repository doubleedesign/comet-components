import{_ as l,c as p,b as n,a as r,d as e,e as a,w as t,r as i,o as u}from"./app-FK185JKc.js";const d={},m={class:"hint-container info"},h={class:"table-of-contents"};function k(b,s){const c=i("RouteLink"),o=i("router-link");return u(),p("div",null,[s[8]||(s[8]=n("h1",{id:"usage-in-wordpress-themes-and-plugins",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usage-in-wordpress-themes-and-plugins"},[n("span",null,"Usage in WordPress themes and plugins")])],-1)),n("div",m,[s[3]||(s[3]=n("p",{class:"hint-container-title"},"Info",-1)),s[4]||(s[4]=n("p",null,"This page details using Comet Components within WordPress for creating your own blocks in your own plugin or theme.",-1)),n("p",null,[s[1]||(s[1]=e("See the ")),a(c,{to:"/installation/wordpress.html"},{default:t(()=>s[0]||(s[0]=[e("WordPress installation")])),_:1}),s[2]||(s[2]=e(" page for initial setup instructions."))])]),n("nav",h,[n("ul",null,[n("li",null,[a(o,{to:"#with-custom-acf-blocks"},{default:t(()=>s[5]||(s[5]=[e("With custom ACF blocks")])),_:1})]),n("li",null,[a(o,{to:"#with-custom-native-blocks"},{default:t(()=>s[6]||(s[6]=[e("With custom native blocks")])),_:1}),n("ul",null,[n("li",null,[a(o,{to:"#saving-with-minimal-markup"},{default:t(()=>s[7]||(s[7]=[e("Saving with minimal markup")])),_:1})])])])])]),s[9]||(s[9]=r(`<h2 id="with-custom-acf-blocks" tabindex="-1"><a class="header-anchor" href="#with-custom-acf-blocks"><span>With custom ACF blocks</span></a></h2><p>When creating a new block for a client site, I usually:</p><ul><li>use <a href="https://www.advancedcustomfields.com/resources/blocks/" target="_blank" rel="noopener noreferrer">ACF Blocks</a> to meet the particular requirements of that client<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></li><li>set at least one parent block - usually a layout or content grouping component such as <code>Container</code>, <code>Column</code>, <code>Group</code>, or <code>PanelContent</code></li><li>set the <code>renderTemplate</code> in <code>block.json</code> and convert the ACF field data to Comet component instances rendered in that file</li><li>prefix the block name with a client-specific name, e.g., <code>karilee/classes</code></li><li>use API version 2 in <code>block.json</code>, because version 3 is known to cause some problems with preview mode.</li></ul><p>These blocks to be accounted for in the <code>render_block</code> and <code>process_innerblocks</code> methods in the Comet plugin&#39;s <code>BlockRenderer</code> class, ensuring that the <code>PreprocessedHTML</code> component is used to render them. Otherwise, they will either render nothing at all, or will throw a <code>RuntimeException</code> because there is no matching component. In most cases, this is already taken care of by those methods checking for prefixes other than <code>core/</code> and<br><code>comet/</code>. I just wanted to note it here because it caused some seriously head-scratching silent failures early on and is likely to again if there are situations I have not accounted for yet.</p><h2 id="with-custom-native-blocks" tabindex="-1"><a class="header-anchor" href="#with-custom-native-blocks"><span>With custom native blocks</span></a></h2><h3 id="saving-with-minimal-markup" tabindex="-1"><a class="header-anchor" href="#saving-with-minimal-markup"><span>Saving with minimal markup</span></a></h3><p>When creating blocks without ACF i.e., with core <code>edit</code> and <code>save</code> functions, there are some key things to know:</p><ol><li>The <code>edit</code> function determines what is shown in the editor, so you should try to mimic the Comet Components output as closely as possible for ease of styling and consistency between the front and back-ends.</li><li>There are two approaches to the <code>save</code> function. You can either: <ul><li>return the same HTML as the <code>edit</code> function, which will be saved as-is in the post content, or</li><li>use a very minimal <code>save</code> function to let the Comet PHP take care of all front-end rendering.</li></ul></li></ol><p>I have opted for option 2 because it&#39;s less code duplication and less prone to hard-to-debug inconsistencies, and prevents &quot;rogue&quot; classes from being added to the output.</p><p>For example, this...</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function-variable function">save</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>attributes<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">		<span class="token string">&#39;section&#39;</span><span class="token punctuation">,</span></span>
<span class="line">		useBlockProps<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;banner&#39;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">			<span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">{</span><span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;banner__overlay&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">			<span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token punctuation">{</span><span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&#39;banner__content&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token function">createElement</span><span class="token punctuation">(</span>InnerBlocks<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...somehow brings with it WordPress&#39;s built-in utility classes, such as <code>banner__content</code> having<br><code>is-content-justification-left is-layout-constrained wp-container-comet-banner-is-layout-1 wp-block-comet-banner-is-layout-constrained</code><br> added to it, which I don&#39;t want.</p><p>Instead, I use a minimal <code>save</code> function like this:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function-variable function">save</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">		<span class="token string">&#39;section&#39;</span><span class="token punctuation">,</span></span>
<span class="line">		useBlockProps<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token function">createElement</span><span class="token punctuation">(</span>InnerBlocks<span class="token punctuation">.</span>Content<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...which saves a minimal version of the block and allows me more control over the output from my PHP code.</p><p>There are valid reasons to choose option 1 - having the code in the database closely match the PHP-driven output could be a useful fallback; it&#39;s just not the approach I have chosen because I am prioritising predictability, clean markup, minimal code duplication.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>If the block is generic enough that it can be created with simple core/Comet block combinations, there&#39;s a good chance it can go in the Comet plugin for use by all clients. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,18))])}const f=l(d,[["render",k]]),g=JSON.parse('{"path":"/usage/wordpress.html","title":"Using in WordPress","lang":"en-AU","frontmatter":{"title":"Using in WordPress","position":3},"headers":[{"level":2,"title":"With custom ACF blocks","slug":"with-custom-acf-blocks","link":"#with-custom-acf-blocks","children":[]},{"level":2,"title":"With custom native blocks","slug":"with-custom-native-blocks","link":"#with-custom-native-blocks","children":[{"level":3,"title":"Saving with minimal markup","slug":"saving-with-minimal-markup","link":"#saving-with-minimal-markup","children":[]}]}],"git":{"updatedTime":1744727056000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":8}],"changelog":[{"hash":"9c3ee64c7674bbe98668484e4b3b92bcbb26cada","time":1744727056000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Start page on WP development; fix a link"},{"hash":"241d4d69a5f4eb46b1ca8764b5e0d98c3500e41c","time":1743751485000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Small doc tweaks"},{"hash":"a2519aef7d7ea6c5cda3c66142eba8ed17fcf14a","time":1743250619000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Fix(Docs): Fix unwanted hard wraps; Docs: Add links to intro"},{"hash":"4fda7f5158eab97de8674c8ee0e915539ee998b9","time":1743203983000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Add PHP architecture overview; update page order and other tweaks"},{"hash":"8b540960a2d2a19bf7530fc92ee7e0b606d5a3cb","time":1742900302000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Various doc tweaks"},{"hash":"bd46ea421c43d7241b0682e551b9810fce24a5c8","time":1742709938000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Finish migrating docs to VuePress"},{"hash":"593c083e86d6a8baa7e78e6af98e148d7f5d69b9","time":1742624410000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"More work on new docs; WIP on updating and improving doc generation for abstract classes/traits/types"},{"hash":"303cb71ac1533272d792db6690210a5dbf5cf23c","time":1742550096000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Start basic VuePress site for Markdown docs"}]},"filePathRelative":"usage/wordpress.md"}');export{f as comp,g as data};
