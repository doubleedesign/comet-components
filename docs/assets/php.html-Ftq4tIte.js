import{_ as h,c as m,b as s,a as u,e as a,w as l,d as n,r as c,o as g}from"./app-7PHnVWJ0.js";const b={},v={class:"table-of-contents"},f={class:"hint-container info"},w={class:"hint-container-title"},y={class:"hint-container details"},k={class:"hint-container info"},P={class:"hint-container-title"},x={class:"hint-container details"},L={class:"hint-container details"},H={id:"xdebug",tabindex:"-1"},W={class:"header-anchor",href:"#xdebug"},S={id:"phpstorm-configuration",tabindex:"-1"},C={class:"header-anchor",href:"#phpstorm-configuration"};function I(j,e){const d=c("router-link"),r=c("Badge"),o=c("RouteLink"),p=c("Tabs");return g(),m("div",null,[e[56]||(e[56]=s("h1",{id:"php-development-setup-on-windows",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#php-development-setup-on-windows"},[s("span",null,"PHP development setup on Windows")])],-1)),s("nav",v,[s("ul",null,[s("li",null,[a(d,{to:"#installing-php-natively-in-windows"},{default:l(()=>e[0]||(e[0]=[n("Installing PHP natively in Windows")])),_:1})]),s("li",null,[a(d,{to:"#composer"},{default:l(()=>e[1]||(e[1]=[n("Composer")])),_:1})]),s("li",null,[a(d,{to:"#checking-and-changing-instances"},{default:l(()=>e[2]||(e[2]=[n("Checking and changing instances")])),_:1})]),s("li",null,[a(d,{to:"#xdebug"},{default:l(()=>[a(r,{type:"info",text:"Optional",vertical:"middle"}),e[3]||(e[3]=n(" Xdebug"))]),_:1})]),s("li",null,[a(d,{to:"#phpstorm-configuration"},{default:l(()=>[a(r,{type:"info",text:"Optional",vertical:"middle"}),e[4]||(e[4]=n(" PhpStorm Configuration"))]),_:1})])])]),e[57]||(e[57]=s("h2",{id:"installing-php-natively-in-windows",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#installing-php-natively-in-windows"},[s("span",null,"Installing PHP natively in Windows")])],-1)),e[58]||(e[58]=s("p",null,"You can install PHP in Windows a number of ways, including:",-1)),s("ol",null,[s("li",null,[e[6]||(e[6]=n("Installing ")),e[7]||(e[7]=s("a",{href:"https://herd.laravel.com/windows",target:"_blank",rel:"noopener noreferrer"},"Laravel Herd",-1)),e[8]||(e[8]=n(", a GUI which includes PHP and Composer and puts them in your ")),a(o,{to:"/local-dev-deep-dives/setup.html#general-notes-and-troubleshooting-tips"},{default:l(()=>e[5]||(e[5]=[n("system PATH")])),_:1}),e[9]||(e[9]=n(" automatically"))]),e[10]||(e[10]=s("li",null,[n("Using the "),s("a",{href:"https://community.chocolatey.org/",target:"_blank",rel:"noopener noreferrer"},"Chocolatey"),n(" package manager through PowerShell")],-1)),e[11]||(e[11]=s("li",null,[n("For WordPress development, using "),s("a",{href:"https://localwp.com/",target:"_blank",rel:"noopener noreferrer"},"Local by Flywheel")],-1)),e[12]||(e[12]=s("li",null,[n("Using local web server software such as "),s("a",{href:"https://www.wampserver.com/en/",target:"_blank",rel:"noopener noreferrer"},"WampServer")],-1)),e[13]||(e[13]=s("li",null,[n("Downloading a zip from "),s("a",{href:"https://www.php.net/downloads",target:"_blank",rel:"noopener noreferrer"},"php.net"),n(" and extracting it where you want it to live (quickest and easiest in the short term, but not great for updates).")],-1))]),e[59]||(e[59]=u(`<details class="hint-container details"><summary>Install with Laravel Herd</summary><p>Download and install <a href="https://herd.laravel.com/windows" target="_blank" rel="noopener noreferrer">Laravel Herd</a>. It comes with PHP and Composer built in, and makes it very easy to have multiple PHP versions installed and switch between them - no need to change environment variables or even type a terminal command.</p></details><details class="hint-container details"><summary>Install via PowerShell with Chocolatey</summary><p>Standard installation - installs in C:/tools by default:</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">choco install php </span>
<span class="line"></span></code></pre></div><p>To update:</p><div class="language-powershell" data-highlighter="prismjs" data-ext="powershell"><pre><code><span class="line">choco upgrade php</span>
<span class="line"></span></code></pre></div></details><p>After installing, you can confirm PHP is available in your terminal (and the version) like so:</p>`,3)),a(p,{id:"57",data:[{id:"PowerShell"}],"tab-id":"shell"},{title0:l(({value:i,isActive:t})=>e[14]||(e[14]=[n("PowerShell")])),tab0:l(({value:i,isActive:t})=>e[15]||(e[15]=[s("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[n("php "),s("span",{class:"token operator"},"-"),n("v")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),s("p",null,[e[17]||(e[17]=n("If this doesn't show a PHP version, you may just need to manually ")),a(o,{to:"/local-dev-deep-dives/setup.html#general-notes-and-troubleshooting-tips"},{default:l(()=>e[16]||(e[16]=[n("add PHP to your PATH")])),_:1}),e[18]||(e[18]=n("."))]),e[60]||(e[60]=s("p",null,"If you have multiple instances of PHP, see which is in use with:",-1)),a(p,{id:"68",data:[{id:"PowerShell"}],"tab-id":"shell"},{title0:l(({value:i,isActive:t})=>e[19]||(e[19]=[n("PowerShell")])),tab0:l(({value:i,isActive:t})=>e[20]||(e[20]=[s("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"Get-Command"),n(" php")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1}),e[61]||(e[61]=s("hr",null,null,-1)),s("div",f,[s("p",w,[a(r,{type:"info",text:"Optional",vertical:"middle"}),e[21]||(e[21]=n(" Use Windows' PHP in WSL"))]),s("p",null,[e[23]||(e[23]=n("If using ")),a(o,{to:"/local-dev-deep-dives/tooling-guides/wsl.html"},{default:l(()=>e[22]||(e[22]=[n("WSL")])),_:1}),e[24]||(e[24]=n(" for your day-to-day CLI needs, you can install PHP within the Linux environment, but for consistency with other tools it can be easier to use the Windows installation. There are two ways you can do this:"))])]),e[62]||(e[62]=u(`<details class="hint-container details"><summary>Option 1: Use an alias</summary><p>You can have WSL use the &quot;Global PHP version&quot; set in Laravel Herd using an alias in <code>.zshrc</code> or <code>.bashrc</code> that routes the command via PowerShell like the below example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># /home/leesa/.zshrc</span></span>
<span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">php</span><span class="token operator">=</span><span class="token string">&#39;powershell.exe /c C:\\\\Users\\\\leesa\\\\.config\\\\herd\\\\bin\\\\php.bat&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also alias it to a specific version or instance of PHP, for example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># /home/leesa/.zshrc</span></span>
<span class="line"><span class="token comment"># Specific Herd instance</span></span>
<span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">php</span><span class="token operator">=</span><span class="token string">&#39;powershell.exe /c C:\\\\Users\\\\leesa\\\\.config\\\\herd\\\\bin\\\\php84\\\\php.exe&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># /home/leesa/.zshrc</span></span>
<span class="line"><span class="token comment"># Chocolatey default location</span></span>
<span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">php</span><span class="token operator">=</span><span class="token string">&#39;powershell.exe /c C:\\\\tools\\\\php84\\\\php.exe&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Restart the WSL terminal and then confirm it works and see the version with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php <span class="token parameter variable">-v</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Option 2: Use a symlink</summary><p>You can create a symbolic link to have WSL use a specific PHP executable that is installed anywhere in Windows.</p><p>If you already have one set up and are here to change your PHP version, remove the existing symlink first:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For a symlink to specific PHP version, use one of the following from a WSL terminal as relevant to your setup and PHP version, the command format is <code>sudo ln -s /mnt/c/path/to/php.exe /usr/local/bin/php</code>. For example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># For PHP 8.4 from Laravel Herd (replace leesa with your Windows username)</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /mnt/c/Users/leesa/.config/herd/bin/php84/php.exe /usr/local/bin/php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Restart the WSL terminal and then confirm it works and see the version with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php <span class="token parameter variable">-v</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>Troubleshooting</summary><p>To confirm which PHP instance is being used, you can run the following in WSL:</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">which</span> php</span>
<span class="line"></span></code></pre></div><p>If it is using alias, you will see something like:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php: aliased to powershell.exe /c C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>leesa<span class="token punctuation">\\</span>.config<span class="token punctuation">\\</span>herd<span class="token punctuation">\\</span>bin<span class="token punctuation">\\</span>php.bat</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For a symlink, you will see something like:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">/usr/local/bin/php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you have both, the alias will take precedence.</p></details><h2 id="composer" tabindex="-1"><a class="header-anchor" href="#composer"><span>Composer</span></a></h2><p>Composer is a dependency manager for PHP. You can install it in a number of ways, such as:</p><ul><li>Downloading and running the <a href="https://getcomposer.org/download/" target="_blank" rel="noopener noreferrer">Windows installer</a> from the Compser website</li><li>Via Chocolatey in PowerShell</li><li>By installing <a href="https://herd.laravel.com/windows" target="_blank" rel="noopener noreferrer">Laravel Herd</a>, which comes with Composer built-in.</li></ul><details class="hint-container details"><summary>Install with Laravel Herd</summary><p>Download and install <a href="https://herd.laravel.com/windows" target="_blank" rel="noopener noreferrer">Laravel Herd</a>. It comes with PHP and Composer built in.</p></details><details class="hint-container details"><summary>Install via PowerShell with Chocolatey</summary><div class="language-PowerShell line-numbers-mode" data-highlighter="prismjs" data-ext="PowerShell"><pre><code><span class="line">choco install composer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To update:</p><div class="language-PowerShell line-numbers-mode" data-highlighter="prismjs" data-ext="PowerShell"><pre><code><span class="line">choco upgrade composer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details>`,8)),s("details",y,[e[28]||(e[28]=s("summary",null,"Confirm Composer alias is available",-1)),e[29]||(e[29]=s("p",null,"Once installed, confirm that it works in PowerShell:",-1)),e[30]||(e[30]=s("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[n("composer "),s("span",{class:"token operator"},"-"),n("v")]),n(`
`),s("span",{class:"line"})])])],-1)),s("p",null,[e[26]||(e[26]=n("If it doesn't work, you probably just need to manually add the path to composer in your ")),a(o,{to:"/local-dev-deep-dives/setup.html#general-notes-and-troubleshooting-tips"},{default:l(()=>e[25]||(e[25]=[n("PATH system environment variable")])),_:1}),e[27]||(e[27]=n("."))])]),s("div",k,[s("p",P,[a(r,{type:"info",text:"Optional",vertical:"middle"}),e[31]||(e[31]=n(" Use Windows' Composer in WSL"))]),e[34]||(e[34]=u(`<p>If using Windows&#39; PHP as explained above, Composer can then be used from WSL by adding an alias to your Bash config (<br><code>.bashrc</code> or <code>.zshrc</code>) like so:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># /home/leesa/.zshrc</span></span>
<span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">composer</span><span class="token operator">=</span><span class="token string">&#39;powershell.exe /c C:\\\\Users\\\\leesa\\\\.config\\\\herd\\\\bin\\\\composer.bat&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see from it starting with <code>powershell.exe</code>, this effectively makes WSL a wrapper and the command is actually<br> executed by PowerShell. This makes no real difference in practice, but it&#39;s nice to not have to switch terminals.</p><p>Restart the WSL terminal and then confirm it works:</p>`,4)),a(p,{id:"183",data:[{id:"WSL (Bash)"}],"tab-id":"shell"},{title0:l(({value:i,isActive:t})=>e[32]||(e[32]=[n("WSL (Bash)")])),tab0:l(({value:i,isActive:t})=>e[33]||(e[33]=[s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"composer"),n(),s("span",{class:"token parameter variable"},"-v")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1})]),e[63]||(e[63]=s("hr",null,null,-1)),e[64]||(e[64]=s("h2",{id:"checking-and-changing-instances",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#checking-and-changing-instances"},[s("span",null,"Checking and changing instances")])],-1)),s("details",x,[e[39]||(e[39]=s("summary",null,"Which instance is being used?",-1)),e[40]||(e[40]=s("p",null,"At any time, you can confirm where the PHP and Composer aliases resolve to with the following commands:",-1)),a(p,{id:"197",data:[{id:"WSL (Bash)"},{id:"PowerShell"}],"tab-id":"shell"},{title0:l(({value:i,isActive:t})=>e[35]||(e[35]=[n("WSL (Bash)")])),title1:l(({value:i,isActive:t})=>e[36]||(e[36]=[n("PowerShell")])),tab0:l(({value:i,isActive:t})=>e[37]||(e[37]=[s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[n("readlink "),s("span",{class:"token parameter variable"},"-f"),n(),s("span",{class:"token variable"},[s("span",{class:"token variable"},"$("),s("span",{class:"token function"},"which"),n(" php"),s("span",{class:"token variable"},")")])]),n(`
`),s("span",{class:"line"})])])],-1),s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"which"),n(),s("span",{class:"token function"},"composer")]),n(`
`),s("span",{class:"line"})])])],-1)])),tab1:l(({value:i,isActive:t})=>e[38]||(e[38]=[s("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"Get-Command"),n(" php")]),n(`
`),s("span",{class:"line"})])])],-1),s("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"Get-Command"),n(" composer")]),n(`
`),s("span",{class:"line"})])])],-1)])),_:1})]),s("details",L,[e[44]||(e[44]=s("summary",null,"Changing the PHP or Composer instance",-1)),s("p",null,[e[42]||(e[42]=n("To change the global PHP version, if you're using Laravel Herd you can just do it in the GUI - there's a simple dropdown. Otherwise, you can modify the ")),a(o,{to:"/local-dev-deep-dives/setup.html#general-notes-and-troubleshooting-tips"},{default:l(()=>e[41]||(e[41]=[n("system PATH variables")])),_:1}),e[43]||(e[43]=n(" in the Windows GUI."))]),e[45]||(e[45]=s("p",null,`For WSL, follow the "Use Windows' PHP in WSL" and "Use Windows' Composer in WSL" instructions above to set up or update your alias or symlink to the PHP executable you want to use.`,-1))]),s("h2",H,[s("a",W,[s("span",null,[a(r,{type:"info",text:"Optional",vertical:"middle"}),e[46]||(e[46]=n(" Xdebug"))])])]),e[65]||(e[65]=s("p",null,"Xdebug is a PHP extension which provides debugging and profiling capabilities. It is required for generating code coverage reports with Pest/PHPUnit, and is useful for other debugging tasks.",-1)),e[66]||(e[66]=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"Tips"),s("p",null,"If you are using Laravel Herd or Local by Flywheel to manage PHP, Xdebug is already installed on your system."),s("p",null,[n("If using PhpStorm you can check if Xdebug is available (and find your "),s("code",null,"php.ini"),n(" file if it isn't) in "),s("code",null,"File > Settings > PHP > CLI Interpreter"),n(".")])],-1)),e[67]||(e[67]=s("p",null,"For Local by Flywheel, there is a toggle on your site's main screen to enable Xdebug.",-1)),s("p",null,[e[48]||(e[48]=n("For Laravel Herd Pro with PhpStorm, the ")),e[49]||(e[49]=s("a",{href:"https://herd.laravel.com/docs/macos/debugging/xdebug-detection",target:"_blank",rel:"noopener noreferrer"},"Xdebug detection",-1)),e[50]||(e[50]=n(" feature should enable it automatically when you try to use it with breakpoints. If it doesn't, or you need to trigger it another way (such as for unit test coverage), you can enable it manually. See the troubleshooting section of the ")),a(o,{to:"/local-dev-deep-dives/testing/unit-testing.html#troubleshooting"},{default:l(()=>e[47]||(e[47]=[n("unit testing")])),_:1}),e[51]||(e[51]=n(" page for more information."))]),e[68]||(e[68]=u(`<p>For other setups including the free version of Herd, enable it by adding the following to the <code>php.ini</code> file (updating the path to the Xdebug DLL as necessary):</p><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code><span class="line"><span class="token key attr-name">zend_extension</span> <span class="token punctuation">=</span> <span class="token value attr-value">C:\\Program Files\\Herd\\resources\\app.asar.unpacked\\resources\\bin\\xdebug\\xdebug-8.4.dll</span></span>
<span class="line"><span class="token key attr-name">xdebug.mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">debug,develop</span></span>
<span class="line"><span class="token key attr-name">xdebug.start_with_request</span> <span class="token punctuation">=</span> <span class="token value attr-value">yes</span></span>
<span class="line"><span class="token key attr-name">xdebug.start_upon_error</span> <span class="token punctuation">=</span> <span class="token value attr-value">yes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Tips for using XDebug with Local by Flywheel</summary><p>If you are trying to use XDebug for a WordPress site using Local, make sure to:</p><ul><li>Turn on XDebug in the Local GUI for the site</li><li>Set the PhpStorm CLI interpreter to use Local&#39;s PHP instance</li><li>Exit Laravel Herd if it is running, because it is probably using the same port unless you&#39;ve changed one of them</li><li>Restart your site in Local after making any changes to <code>php.ini</code>.</li></ul></details><hr>`,4)),s("h2",S,[s("a",C,[s("span",null,[a(r,{type:"info",text:"Optional",vertical:"middle"}),e[52]||(e[52]=n(" PhpStorm Configuration"))])])]),s("p",null,[e[54]||(e[54]=n("See the ")),a(o,{to:"/local-dev-deep-dives/tooling-guides/phpstorm.html"},{default:l(()=>e[53]||(e[53]=[n("PhpStorm setup notes")])),_:1}),e[55]||(e[55]=n(" for more information."))])])}const A=h(b,[["render",I]]),U=JSON.parse('{"path":"/local-dev-deep-dives/tooling-guides/php.html","title":"PHP on Windows","lang":"en-AU","frontmatter":{"title":"PHP on Windows"},"headers":[{"level":2,"title":"Installing PHP natively in Windows","slug":"installing-php-natively-in-windows","link":"#installing-php-natively-in-windows","children":[]},{"level":2,"title":"Composer","slug":"composer","link":"#composer","children":[]},{"level":2,"title":"Checking and changing instances","slug":"checking-and-changing-instances","link":"#checking-and-changing-instances","children":[]},{"level":2,"title":"Xdebug","slug":"xdebug","link":"#xdebug","children":[]},{"level":2,"title":"PhpStorm Configuration","slug":"phpstorm-configuration","link":"#phpstorm-configuration","children":[]}],"git":{"updatedTime":1743766162000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":10}],"changelog":[{"hash":"9327d3d2a273c6125f395c48ab9acfe1e6b6df85","time":1743766162000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Add quick start dev guide, move detail pages, and simplify sidebar"},{"hash":"1fc876f65b45e5157e264799d11a4001598c7f08","time":1743327721000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Refactor tests: Migrate unit tests to Pest"},{"hash":"b1c17f88cb79eff67f4fa378b40bcec55ab9b3b9","time":1743247252000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Troubleshoot Xdebug and document it"},{"hash":"8b540960a2d2a19bf7530fc92ee7e0b606d5a3cb","time":1742900302000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Various doc tweaks"},{"hash":"1cc0f89c7b4a8f37925f73ae409bfcb3b5592364","time":1742796925000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Config: Enable co-locating test files without them being included in Composer project installations"},{"hash":"96739d78cd2179894e18d3c20ae079fb0b624f19","time":1742775592000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Refactor: Move Vue loader stuff into core src so it stops creating Composer headaches"},{"hash":"bd46ea421c43d7241b0682e551b9810fce24a5c8","time":1742709938000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Finish migrating docs to VuePress"},{"hash":"593c083e86d6a8baa7e78e6af98e148d7f5d69b9","time":1742624410000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"More work on new docs; WIP on updating and improving doc generation for abstract classes/traits/types"},{"hash":"303cb71ac1533272d792db6690210a5dbf5cf23c","time":1742550096000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Start basic VuePress site for Markdown docs"},{"hash":"497be2bccbfe9b52a6bd8cdcf9d3018f71401b0b","time":1740893136000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Feat(IconWithText): Add IconWithText component"}]},"filePathRelative":"local-dev-deep-dives/tooling-guides/php.md"}');export{A as comp,U as data};
