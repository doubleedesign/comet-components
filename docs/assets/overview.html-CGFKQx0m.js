import{_ as o,c as l,b as n,a as r,d as t,e as s,w as i,r as p,o as c}from"./app-C_Df3igD.js";const d={},u={class:"table-of-contents"};function m(h,e){const a=p("router-link");return c(),l("div",null,[e[3]||(e[3]=n("h1",{id:"overview",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#overview"},[n("span",null,"Overview")])],-1)),e[4]||(e[4]=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Definition"),n("p",null,[t("An "),n("strong",null,"implementation"),t(" of Comet Components is an integration for a Content Management System (CMS) or other platform that allows the components to be used in that system. An implementation includes the core library (installed as a Composer dependency), any necessary plugins, and the platform-specific code required to make the components work in that system.")])],-1)),e[5]||(e[5]=n("p",null,"This page provides an overview of the elements required to integrate Comet Components into a CMS or other system.",-1)),n("nav",u,[n("ul",null,[n("li",null,[s(a,{to:"#initial-setup"},{default:i(()=>e[0]||(e[0]=[t("Initial setup")])),_:1})]),n("li",null,[s(a,{to:"#setting-configuration"},{default:i(()=>e[1]||(e[1]=[t("Setting configuration")])),_:1})]),n("li",null,[s(a,{to:"#theming-support"},{default:i(()=>e[2]||(e[2]=[t("Theming support")])),_:1})])])]),e[6]||(e[6]=r(`<h2 id="initial-setup" tabindex="-1"><a class="header-anchor" href="#initial-setup"><span>Initial setup</span></a></h2><p>Create your implementation as a Composer package with the Comet Components core library as a dependency. The basics of what to include in your <code>composer.json</code> are:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;namespace/your-implementation-name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token property">&quot;doubleedesign/comet-components-core&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or if you have already set up your Composer configuration, you can install Comet with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">composer</span> require doubleedesign/comet-components-core</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="setting-configuration" tabindex="-1"><a class="header-anchor" href="#setting-configuration"><span>Setting configuration</span></a></h2><p>Implementations need a way to set the global configuration for the components, which are found in the <code>CometConfig</code> class.</p><p>The most basic way, using the global background setting as an example, is like so:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token class-name static-context">CometConfig</span><span class="token operator">::</span><span class="token function">set_global_background</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Depending on the way your CMS works, you may need to do this in a particular place. For example, the Comet Canvas WordPress theme does it in an action hook (and provides a filter for child themes to change it).</p><details class="hint-container details"><summary>What if I don&#39;t do this?</summary><p>Nothing will break - the options will be set to their defaults.</p></details><h2 id="theming-support" tabindex="-1"><a class="header-anchor" href="#theming-support"><span>Theming support</span></a></h2><p>Implementations need a way for their usages to apply their own CSS. At a minimum, this is the ability to have a custom stylesheet that would contain CSS variables that match what Comet expects, but many implementations will have more complex requirements.</p><p>For example, in the WordPress implementation this is achieved through loading theme stylesheets and some custom code in the Comet Canvas parent theme to load <code>theme.json</code> variables as thes CSS variables that Comet Components expects. If your CMS also has a particular way that design tokens are set, you will need a way to get that to integrate with Comet.</p><hr><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>// TODO More info to come</p></div>`,16))])}const v=o(d,[["render",m]]),f=JSON.parse('{"path":"/development-new/overview.html","title":"Overview","lang":"en-AU","frontmatter":{"position":0},"headers":[{"level":2,"title":"Initial setup","slug":"initial-setup","link":"#initial-setup","children":[]},{"level":2,"title":"Setting configuration","slug":"setting-configuration","link":"#setting-configuration","children":[]},{"level":2,"title":"Theming support","slug":"theming-support","link":"#theming-support","children":[]}],"git":{"updatedTime":1743903664000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":2}],"changelog":[{"hash":"dc7397166b1c694a395356b72c0a26e691b15cdf","time":1743903664000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Add more info to the New Implementations page; update build"},{"hash":"7d15f09f18c9133c0dce33d0572fe87f1ab2f50c","time":1743834499000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Add to quick start detail page; improve overall navigation incl. adding in-page sticky menu for some pages"}]},"filePathRelative":"development-new/overview.md"}');export{v as comp,f as data};
