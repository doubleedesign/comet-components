import{_ as p,c as u,b as n,a as d,e as a,w as s,d as t,r as i,o as m}from"./app-kQtp0ML3.js";const c={},h={class:"table-of-contents"};function g(b,e){const l=i("router-link"),o=i("Badge"),r=i("RouteLink");return m(),u("div",null,[e[31]||(e[31]=n("h1",{id:"cli-command-quick-reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cli-command-quick-reference"},[n("span",null,"CLI command quick reference")])],-1)),n("nav",h,[n("ul",null,[n("li",null,[a(l,{to:"#convenience-scripts"},{default:s(()=>e[0]||(e[0]=[t("Convenience scripts")])),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#equivalent-standalone-commands"},{default:s(()=>e[1]||(e[1]=[t("Equivalent standalone commands")])),_:1})])])]),n("li",null,[a(l,{to:"#asset-compilation"},{default:s(()=>e[2]||(e[2]=[t("Asset compilation")])),_:1})]),n("li",null,[a(l,{to:"#new-component-creation"},{default:s(()=>e[3]||(e[3]=[t("New component creation")])),_:1})]),n("li",null,[a(l,{to:"#testing"},{default:s(()=>e[4]||(e[4]=[t("Testing")])),_:1})])])]),e[32]||(e[32]=n("h2",{id:"convenience-scripts",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#convenience-scripts"},[n("span",null,"Convenience scripts")])],-1)),e[33]||(e[33]=n("p",null,"Run these from the root of the project.",-1)),n("table",null,[e[27]||(e[27]=n("thead",null,[n("tr",null,[n("th",null,"Command"),n("th",null,"Description")])],-1)),n("tbody",null,[n("tr",null,[e[6]||(e[6]=n("td",null,[n("code",null,"npm run refresh:composer")],-1)),n("td",null,[e[5]||(e[5]=t("Refresh Composer dependencies and autoloading for the root and all packages ")),a(o,{type:"warning",text:"Requires PowerShell"})])]),n("tr",null,[e[12]||(e[12]=n("td",null,[n("code",null,"npm run refresh:npm")],-1)),n("td",null,[e[7]||(e[7]=t("Run ")),e[8]||(e[8]=n("code",null,"npm install",-1)),e[9]||(e[9]=t(" in the root and all packages, and ")),e[10]||(e[10]=n("code",null,"rollup",-1)),e[11]||(e[11]=t(" in packages that use it ")),a(o,{type:"warning",text:"Requires PowerShell"})])]),n("tr",null,[e[14]||(e[14]=n("td",null,[n("code",null,"npm run refresh:all")],-1)),n("td",null,[e[13]||(e[13]=t("Install/update Composer and NPM dependencies in the root and all packages ")),a(o,{type:"warning",text:"Requires PowerShell"})])]),n("tr",null,[e[18]||(e[18]=n("td",null,[n("code",null,"npm run refresh:autoload")],-1)),n("td",null,[e[15]||(e[15]=t("Run ")),e[16]||(e[16]=n("code",null,"composer dump-autoload -o",-1)),e[17]||(e[17]=t(" for the root and all packages (skip updating dependencies) ")),a(o,{type:"warning",text:"Requires PowerShell"})])]),n("tr",null,[e[24]||(e[24]=n("td",null,[n("code",null,"npm run refresh:npmpackages")],-1)),n("td",null,[e[19]||(e[19]=t("Run ")),e[20]||(e[20]=n("code",null,"npm install",-1)),e[21]||(e[21]=t(" and ")),e[22]||(e[22]=n("code",null,"rollup",-1)),e[23]||(e[23]=t(" in the packages only (skips installing/updating root dev deps like Storybook) ")),a(o,{type:"warning",text:"Requires PowerShell"})])]),e[25]||(e[25]=n("tr",null,[n("td",null,[n("code",null,"php ./scripts/healthcheck.php")]),n("td",null,"Check for expected files")],-1)),e[26]||(e[26]=n("tr",null,[n("td",null,[n("code",null,"php ./scripts/generate-xml.php")]),n("td",null,"Regenerate the XML schema for Tycho Template syntax.")],-1))])]),e[34]||(e[34]=d(`<h3 id="equivalent-standalone-commands" tabindex="-1"><a class="header-anchor" href="#equivalent-standalone-commands"><span>Equivalent standalone commands</span></a></h3><p>These commands need to be run in the relevant folder. Running in the root will only run the command for the root, not the packages. <code>cd</code> into the package folder<br> first if you want to run these for a package.</p><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>composer install</code></td><td>Install Composer dependencies as per <code>composer.json</code></td></tr><tr><td><code>composer update</code></td><td>Update Composer dependencies as per <code>composer.json</code></td></tr><tr><td><code>composer dump-autoload -o</code></td><td>Refresh Composer autoloader after adding new dependencies or classes</td></tr><tr><td><code>npm install</code></td><td>Install all NPM dependencies as per <code>package.json</code></td></tr><tr><td><code>npm run build</code></td><td>Run Rollup to compile JS using the package&#39;s <code>rollup.config.js</code>. For example, for the <code>core</code> package this bundles all component JS files and their imports into a single file.</td></tr></tbody></table><h2 id="asset-compilation" tabindex="-1"><a class="header-anchor" href="#asset-compilation"><span>Asset compilation</span></a></h2><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>npm run build</code></td><td>Bundle Core package component JS and its dependencies into a single file using Rollup</td></tr><tr><td><code>sass input.scss:output.css</code></td><td>Compile a CSS file (or the global file) using Sass (replace <code>input.scss</code> and <code>output.css</code> with the actual filenames)</td></tr></tbody></table><h2 id="new-component-creation" tabindex="-1"><a class="header-anchor" href="#new-component-creation"><span>New component creation</span></a></h2><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The JSON definition and story generators require PHP 8.4+.</p></div><p>Generate a new component (example):</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> run generate component -- <span class="token parameter variable">--name</span><span class="token operator">=</span>gallery <span class="token parameter variable">--type</span><span class="token operator">=</span>simple</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,9)),n("p",null,[e[29]||(e[29]=t("Once you have added fields and docblock comments to a component, generate the JSON definition file and ")),a(r,{to:"/usage/overview.html#tycho-template-syntax"},{default:s(()=>e[28]||(e[28]=[t("Tycho Template syntax")])),_:1}),e[30]||(e[30]=t(" XML definition file (example):"))]),e[35]||(e[35]=d(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php scripts/generate-json-defs.php <span class="token parameter variable">--component</span> Gallery</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or for a new base/abstract/parent component:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php scripts/generate-json-defs.php <span class="token parameter variable">--base</span> Renderable</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Use the same command to update these after making changes.</p><p>You can also generate/update all JSON definition files at once:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php scripts/generate-json-defs.php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then generate stories (example):</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php scripts/generate-stories.php <span class="token parameter variable">--component</span> Container</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If adding a &quot;type&quot; enum, regenerate the Markdown documentation page with:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php scripts/generate-enum-docs.php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Similarly, for a trait:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">php scripts/generate-trait-docs.php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="testing" tabindex="-1"><a class="header-anchor" href="#testing"><span>Testing</span></a></h2><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>npm run storybook</code></td><td>Run Storybook for component demos and documentation</td></tr></tbody></table>`,14))])}const v=p(c,[["render",g]]),k=JSON.parse('{"path":"/development-core/cli-commands.html","title":"CLI command quick reference","lang":"en-AU","frontmatter":{"position":3},"headers":[{"level":2,"title":"Convenience scripts","slug":"convenience-scripts","link":"#convenience-scripts","children":[{"level":3,"title":"Equivalent standalone commands","slug":"equivalent-standalone-commands","link":"#equivalent-standalone-commands","children":[]}]},{"level":2,"title":"Asset compilation","slug":"asset-compilation","link":"#asset-compilation","children":[]},{"level":2,"title":"New component creation","slug":"new-component-creation","link":"#new-component-creation","children":[]},{"level":2,"title":"Testing","slug":"testing","link":"#testing","children":[]}],"git":{"updatedTime":1744275231000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":6}],"changelog":[{"hash":"45a77315c51e6532f20bf311c3ac48f46126e436","time":1744275231000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Simplify Storybook/testing setup by removing the need for symlinks"},{"hash":"7d15f09f18c9133c0dce33d0572fe87f1ab2f50c","time":1743834499000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Add to quick start detail page; improve overall navigation incl. adding in-page sticky menu for some pages"},{"hash":"4fda7f5158eab97de8674c8ee0e915539ee998b9","time":1743203983000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Add PHP architecture overview; update page order and other tweaks"},{"hash":"529799e6963158623d0a136bbe3145ebbbaad07e","time":1743165091000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Feature: Generate XML definition for Tycho syntax; update JSON defs"},{"hash":"bd46ea421c43d7241b0682e551b9810fce24a5c8","time":1742709938000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Finish migrating docs to VuePress"},{"hash":"593c083e86d6a8baa7e78e6af98e148d7f5d69b9","time":1742624410000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"More work on new docs; WIP on updating and improving doc generation for abstract classes/traits/types"}]},"filePathRelative":"development-core/cli-commands.md"}');export{v as comp,k as data};
