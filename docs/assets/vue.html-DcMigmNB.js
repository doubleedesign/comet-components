import{_ as l,c as i,a as e,b as s,e as p,d as a,w as o,r as c,o as r}from"./app-BzyXD7Rl.js";const u={},d={class:"hint-container note"};function k(m,n){const t=c("RouteLink");return r(),i("div",null,[n[11]||(n[11]=e('<h1 id="vue-js-enhanced-components" tabindex="-1"><a class="header-anchor" href="#vue-js-enhanced-components"><span>Vue.js enhanced components</span></a></h1><p>Comet Components is equipped with <a href="https://github.com/FranckFreiburger/vue3-sfc-loader" target="_blank" rel="noopener noreferrer">Vue SFC Loader</a> to selectively load Vue components. This allows you to use Vue.js for specific components in a self-contained way, without needing to convert your entire application to Vue and without interfering with other existing JavaScript on your page (for example, WordPress form plugins often have their own JS that may not work if you try to load the form within a Vue component).</p><p>Use cases for this include:</p><details class="hint-container details"><summary>Client-side interactivity</summary><p>You can use Vue to sprinkle interactivity into specific components on your page, such as accordions and modals.</p></details><details class="hint-container details"><summary>Responsive rendering</summary><p>You can use Vue to respond to viewport or container size changes and render different HTML accordingly. Examples of this can be found in the <code>SiteHeader</code> and <code>ResponsivePanels</code> components.</p><p>This is a response (pun not intended) and solution to the practice of rendering multiple variations of the HTML and using <code>display:none</code> to hide the one you don&#39;t want at that particular time (which has always felt dirty to me!)</p></details><div class="hint-container important"><p class="hint-container-title">Important</p><p>Vue is awesome and a great way to achieve client-side interactive and responsive features, but it is important to understand that Vue SFC loader essentially turns every component using it into a miniature Vue application. If you&#39;re using it so much that you start noticing performance degradation, you might want to just build a full Vue application instead.</p></div><div class="hint-container caution"><p class="hint-container-title">Caution</p><p>A limitation of the current implementation is that each Vue-enhanced component can only be used once per page. Not much of a problem for <code>SiteHeader</code>, but something that is on the roadmap to be fixed for other components such as <code>ResponsivePanels</code>, at which point these docs will be updated to detail how to remove this restriction for new components.</p><p>When creating a Vue-enhanced component that can be used as a WordPress block, add <code>multiple:false</code> to the <code>supports</code> object in <code>block.json</code> to impose the restriction within the editor.</p></div><h2 id="create-a-vue-enhanced-comet-component" tabindex="-1"><a class="header-anchor" href="#create-a-vue-enhanced-comet-component"><span>Create a Vue-enhanced Comet Component</span></a></h2><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>// TODO: This has not yet been tested with standalone JS loading, only with bundled <code>dist.js</code> usage.</p></div>',9)),s("ol",null,[s("li",null,[p(t,{to:"/development-core/new-component.html"},{default:o(()=>n[0]||(n[0]=[a("Create a new component")])),_:1}),n[1]||(n[1]=a(" as you would for a standard PHP component."))]),n[2]||(n[2]=s("li",null,[a("In your component's Blade template, add the "),s("code",null,"data-vue-component"),a(" attribute to the root element of your component. This will be the element that Vue mounts to. For example:")],-1))]),n[12]||(n[12]=e(`<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-vue-component</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>responsive-panels<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>In your component&#39;s directory, create a file with the kebab case name of your component, followed by <code>.vue</code>. For example, if your component is called <code>ResponsivePanels</code>, create a file called <code>responsive-panels.vue</code> and put the below boilerplate code into it, updating <code>ResponsivePanels</code> to the PascalCase name of your component:</li></ol><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ResponsivePanels&#39;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> </span>
<span class="line">	<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Notes about this setup</summary><ul><li>Version 3 of Vue is used.</li><li><code>inheritAttrs: true</code> allows us to pass down attributes directly from PHP class -&gt; Blade like normal and have them work without the Vue component needing specific handling for them. They will be passed to the first HTML element in the Vue component. <ul><li>If the Vue component contains other Vue components and the first rendered HTML element comes from there (such as with the <code>ResponsivePanels</code> component which loads <code>Accordion</code> and <code>Tabs</code> Vue components), that&#39;s where the attributes will go, so long as that child component also has <code>inheritAttrs: true</code>.</li><li>This concept is called <a href="https://vuejs.org/guide/components/attrs" target="_blank" rel="noopener noreferrer">fallthrough attributes</a>.</li></ul></li><li>TypeScript is supported if you include <code>lang=&quot;ts&quot;</code> in the <code>&lt;script&gt;</code> tag.</li><li>This syntax is the Vue <a href="https://vuejs.org/guide/introduction.html#options-api" target="_blank" rel="noopener noreferrer">options API</a>.</li></ul></details><ol start="4"><li>Add a <code>your-component.js</code> file to the component directory. Copy and paste the code below into it:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;../../plugins/vue-wrapper/src/vue.esm-browser.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> loadModule <span class="token punctuation">}</span> <span class="token keyword">from</span>  <span class="token string">&#39;../../plugins/vue-wrapper/src/vue3-sfc-loader.esm.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> vueSfcLoaderOptions<span class="token punctuation">,</span> <span class="token constant">BASE_PATH</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../plugins/vue-wrapper/src/index.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token literal-property property">ResponsivePanels</span><span class="token operator">:</span> Vue<span class="token punctuation">.</span><span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> <span class="token function">loadModule</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">BASE_PATH</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src/components/ResponsivePanels/responsive-panels.vue</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> vueSfcLoaderOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;[data-vue-component=&quot;responsive-panels&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Update to suit your component by:</p><ul><li>Updating <code>ResponsivePanels</code> on line 7 to the PascalCase name of your component</li><li>Update the path to the <code>.vue</code> file on line 8 to the path to the file you just created in step 3</li><li>Update the selector on line 11 to match what you put in your Blade template in step 2.</li></ul><ol start="5"><li>Add the <code>your-component.js</code> file to the <code>dist.js</code> build process in <code>rollup.index.js</code> in the core package root directory.</li></ol>`,9)),s("div",d,[n[10]||(n[10]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[4]||(n[4]=a("If you don't have a ")),p(t,{to:"/local-dev-deep-dives/tooling-guides/phpstorm.html#file-watchers"},{default:o(()=>n[3]||(n[3]=[a("file watcher")])),_:1}),n[5]||(n[5]=a(" or other automatic way for Rollup to run configured, you will need to run ")),n[6]||(n[6]=s("code",null,"npm run build",-1)),n[7]||(n[7]=a(" from the core package directory manually to update the ")),n[8]||(n[8]=s("code",null,"dist.js",-1)),n[9]||(n[9]=a(" file with your new script - and do so again whenever you change it."))])]),n[13]||(n[13]=e(`<ol start="6"><li>In your component&#39;s PHP <code>render()</code> method, add the props you want to pass to the Vue component. For example:</li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token variable">$blade</span> <span class="token operator">=</span> <span class="token class-name static-context">BladeService</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">echo</span> <span class="token variable">$blade</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bladeFile</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">		<span class="token string single-quoted-string">&#39;classes&#39;</span>    <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_filtered_classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string single-quoted-string">&#39;attributes&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_html_attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string single-quoted-string">&#39;breakpoint&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">breakpoint</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string single-quoted-string">&#39;titles&#39;</span>     <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">titles</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string single-quoted-string">&#39;panels&#39;</span>     <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">panels</span></span>
<span class="line">	<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>In your component&#39;s Blade template, render the Vue component using its kebab-case tag and the props you passed through to the render method. For example:</li></ol><div class="language-blade line-numbers-mode" data-highlighter="prismjs" data-ext="blade"><pre><code><span class="line">&lt;div data-vue-component=&quot;responsive-panels&quot; @if ($classes) @class($classes) @endif&gt;</span>
<span class="line">    &lt;responsive-panels </span>
<span class="line">    	@attributes($attributes) </span>
<span class="line">    	breakpoint=&quot;{{ $breakpoint }}&quot; </span>
<span class="line">    	:titles=&quot;{{ json_encode($titles) }}&quot;</span>
<span class="line">        :contents=&quot;{{ json_encode($panels) }}&quot;&gt;</span>
<span class="line">    &lt;/responsive-panels&gt;</span>
<span class="line">&lt;/div&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>Go into your <code>.vue</code> file and add the props you just added to the Blade template to the <code>props</code> of the component. For example:</li></ol><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;../../plugins/vue-wrapper/src/vue.esm-browser.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> type <span class="token punctuation">{</span> PanelItem <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types.ts&#39;</span><span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ResponsivePanels&#39;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token literal-property property">titles</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">type</span><span class="token operator">:</span> Array <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> PanelItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token literal-property property">contents</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token literal-property property">type</span><span class="token operator">:</span> Array <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> PanelItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token literal-property property">breakpoint</span><span class="token operator">:</span> String</span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token comment">// ... rest of your component script</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li>Go forth and build the rest of your Vue component!</li></ol><details class="hint-container details"><summary>Where to put CSS?</summary><p>Yeah, I need to decide on some guidance about that.</p></details>`,8))])}const h=l(u,[["render",k]]),b=JSON.parse('{"path":"/technical-deep-dives/js-architecture/vue.html","title":"Advanced - Vue.js","lang":"en-AU","frontmatter":{"title":"Advanced - Vue.js","position":2},"headers":[{"level":2,"title":"Create a Vue-enhanced Comet Component","slug":"create-a-vue-enhanced-comet-component","link":"#create-a-vue-enhanced-comet-component","children":[]}],"git":{"updatedTime":1744275231000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":4}],"changelog":[{"hash":"45a77315c51e6532f20bf311c3ac48f46126e436","time":1744275231000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Simplify Storybook/testing setup by removing the need for symlinks"},{"hash":"df8d8bde5a63f1799cea718821adbaab07b0e28a","time":1744069226000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Feat(ResponsivePanels): Create new responsive accordion/tabs component"},{"hash":"008beb2ac89bdf7045fb4678fc2c37d012a47784","time":1744025781000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Complete JS docs; Refactor: Centralise common Vue SFC Loader setup code; Config: Set up eslint for Vue in core package"},{"hash":"8b540960a2d2a19bf7530fc92ee7e0b606d5a3cb","time":1742900302000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Various doc tweaks"}]},"filePathRelative":"technical-deep-dives/js-architecture/vue.md"}');export{h as comp,b as data};
