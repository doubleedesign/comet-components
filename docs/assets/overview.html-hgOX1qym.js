import{_ as d,c as u,b as s,a as h,d as e,e as t,w as a,r as l,o as m}from"./app-plVwEQ5r.js";const g="/docs/tycho.png",v={},b={class:"hint-container important"},k={class:"table-of-contents"},y={class:"hint-container info"};function f(w,n){const c=l("RouteLink"),p=l("router-link"),r=l("Tabs");return m(),u("div",null,[n[14]||(n[14]=s("h1",{id:"usage-overview",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#usage-overview"},[s("span",null,"Usage overview")])],-1)),s("div",b,[n[3]||(n[3]=s("p",{class:"hint-container-title"},"Important",-1)),s("p",null,[n[1]||(n[1]=e("This section, including the Theming and Extending pages, details how to use Comet Components in your own code. If you're looking for information on using the WordPress plugin in the block editor, see the ")),t(c,{to:"/usage/wordpress.html"},{default:a(()=>n[0]||(n[0]=[e("WordPress usage page")])),_:1}),n[2]||(n[2]=e("."))])]),s("nav",k,[s("ul",null,[s("li",null,[t(p,{to:"#php-object-syntax"},{default:a(()=>n[4]||(n[4]=[e("PHP object syntax")])),_:1})]),s("li",null,[t(p,{to:"#tycho-template-syntax"},{default:a(()=>n[5]||(n[5]=[e("Tycho template syntax")])),_:1})])])]),n[15]||(n[15]=h(`<h2 id="php-object-syntax" tabindex="-1"><a class="header-anchor" href="#php-object-syntax"><span>PHP object syntax</span></a></h2><p>This is the original syntax that components are developed with, and the syntax that the WordPress plugin uses to render components on the front-end.</p><p>Under the hood, the <code>render</code> method calls the <code>BladeService</code> to render the component using a <a href="https://laravel.com/docs/8.x/blade" target="_blank" rel="noopener noreferrer">Blade</a> template.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> Doubleedesign\\Comet\\Core\\<span class="token punctuation">{</span>Container<span class="token punctuation">,</span> Heading<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$attributes</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">	<span class="token string single-quoted-string">&#39;size&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;narrow&#39;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token string single-quoted-string">&#39;backgroundColor&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;light&#39;</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$component</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token variable">$attributes</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">	<span class="token keyword">new</span> <span class="token class-name">Heading</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$component</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tycho-template-syntax" tabindex="-1"><a class="header-anchor" href="#tycho-template-syntax"><span>Tycho template syntax</span></a></h2><figure class="tycho-photo"><p><img src="`+g+`" alt="Tycho"></p><figcaption class="tycho-photo-caption"><strong>This is Tycho.</strong> He is standing by to retrieve schema and chew up XML syntax for us.</figcaption></figure><p>This is essentially XML/JSX-style convenience syntax whereby <a href="https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc" target="_blank" rel="noopener noreferrer">heredoc strings</a> are processed by a custom parser and sent through to the object syntax and hence Blade under the hood.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Tycho template syntax / the <code>TychoService</code> class is <s>a custom creation</s>, glorified XML with a parsing function, not an existing third-party template engine or library. Rather than calling it something generic like <code>TemplateService</code>, for fun I went with continuing the pet-based alliteration and named it after my other dog, Tycho.</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>This option is still in active development and is not yet thoroughly tested.</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>When using this syntax, vanilla <code>var_dump</code> and <code>print_r</code> may not work as expected because of how the parser handles or ignores certain node types.</p><p>The core package is configured to support the Symfony VarDumper, which also has the benefit of sending the debugging output to Laravel Herd&#39;s Dumps feature if you run your project in that environment.</p><p>To use:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>VarDumper<span class="token punctuation">\\</span>VarDumper</span><span class="token operator">::</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$thing_you_want_to_dump</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>The below example renders the same output as the above object syntax:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php"><pre><code><span class="line"><span class="token keyword">use</span> Doubleedesign\\Comet\\Core\\<span class="token punctuation">{</span>TychoService<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$template</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>TYCHO</span></span>
<span class="line">&lt;TychoTemplate xmlns=&quot;schema/components.xsd&quot;&gt;</span>
<span class="line">	&lt;Container size=&quot;narrow&quot; backgroundColor=&quot;light&quot;&gt;</span>
<span class="line">		&lt;Heading&gt;Hello world!&lt;/Heading&gt;</span>
<span class="line">	&lt;/Container&gt;</span>
<span class="line">&lt;/TychoTemplate&gt;</span>
<span class="line"><span class="token delimiter symbol">TYCHO<span class="token punctuation">;</span></span></span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$components</span> <span class="token operator">=</span> <span class="token class-name static-context">TychoService</span><span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$components</span> <span class="token keyword">as</span> <span class="token variable">$component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token variable">$component</span><span class="token operator">-&gt;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),s("div",y,[n[10]||(n[10]=s("p",{class:"hint-container-title"},"Info",-1)),n[11]||(n[11]=s("p",null,[e("Wrapping the components in "),s("code",null,'<TychoTemplate xmlns="schema/components.xsd">'),e(' provides basic IDE autocompletion and validation, and a somewhat useful "go to definition" response (it goes to the schema file, not the PHP class as would be ideal).')],-1)),n[12]||(n[12]=s("p",null,[e("The schema file is located in the core package, in the "),s("code",null,"tycho-fetch.xsd"),e(" file. Because Tycho, the Labrador Retriever, is fetching the definition for the component you threw onto the page...or something like that. :laugh:")],-1)),n[13]||(n[13]=s("p",null,"The XML definition file is generated from the component JSON definition files, and can be updated with:",-1)),t(r,{id:"68",data:[{id:"WSL (Bash)"},{id:"PowerShell"}],"tab-id":"shell"},{title0:a(({value:o,isActive:i})=>n[6]||(n[6]=[e("WSL (Bash)")])),title1:a(({value:o,isActive:i})=>n[7]||(n[7]=[e("PowerShell")])),tab0:a(({value:o,isActive:i})=>n[8]||(n[8]=[s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},"php scripts/generate-xml.php"),e(`
`),s("span",{class:"line"})])])],-1)])),tab1:a(({value:o,isActive:i})=>n[9]||(n[9]=[s("div",{class:"language-powershell","data-highlighter":"prismjs","data-ext":"powershell"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[e("php scripts/generate-xml"),s("span",{class:"token punctuation"},"."),e("php")]),e(`
`),s("span",{class:"line"})])])],-1)])),_:1})])])}const T=d(v,[["render",f]]),L=JSON.parse('{"path":"/usage/overview.html","title":"Overview","lang":"en-AU","frontmatter":{"title":"Overview","position":0},"headers":[{"level":2,"title":"PHP object syntax","slug":"php-object-syntax","link":"#php-object-syntax","children":[]},{"level":2,"title":"Tycho template syntax","slug":"tycho-template-syntax","link":"#tycho-template-syntax","children":[]}],"git":{"updatedTime":1743431150000,"contributors":[{"name":"Leesa Ward","username":"","email":"leesa@doubleedesign.com.au","commits":7}],"changelog":[{"hash":"c792c91e35f07889db6d9effc5cb18aee2dc44f8","time":1743431150000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Update code syntax highlighting; misc doc tweaks"},{"hash":"e918bf058917be304d69e468a11b814ae7504cff","time":1743331328000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: More doc tweaks"},{"hash":"c57f08f4073ef4a64aa9bc79d49a375d4a86a775","time":1743310427000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Tooling: Enable using Herd for viewing test pages and using its Dumps for debugging"},{"hash":"4fda7f5158eab97de8674c8ee0e915539ee998b9","time":1743203983000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Add PHP architecture overview; update page order and other tweaks"},{"hash":"529799e6963158623d0a136bbe3145ebbbaad07e","time":1743165091000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Feature: Generate XML definition for Tycho syntax; update JSON defs"},{"hash":"8b540960a2d2a19bf7530fc92ee7e0b606d5a3cb","time":1742900302000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Docs: Various doc tweaks"},{"hash":"297c877fb40fc308f5230ffa6fa935823697dac5","time":1742726036000,"email":"leesa@doubleedesign.com.au","author":"Leesa Ward","message":"Feat(TychoService): Start work on XML-style &quot;Tycho template&quot; syntax and parser"}]},"filePathRelative":"usage/overview.md"}');export{T as comp,L as data};
